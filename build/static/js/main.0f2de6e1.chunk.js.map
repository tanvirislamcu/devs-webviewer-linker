{"version":3,"sources":["assets/images/carleton.svg","redux/store/store.js","components/Logo/Logo.js","components/Confirmation/Confirmation.js","hooks/useStore.js","hooks/useWindowSize.js","hooks/useActions.js","components/Button/Button.js","components/FileUploader/FileUploader.js","components/ToolViewer/ToolViewer.js","components/Main/UserMenu.js","components/Main/Main.js","components/Toast/Toast.js","components/ToastContext/ToastContext.js","components/Root/Root.js","components/Root/index.js","redux/store/index.js","index.js","services/StorageService.js","redux/actions/index.js","redux/slices/theme.js","redux/slices/tool.js","redux/slices/index.js"],"names":["module","exports","store","configureStore","preloadedState","storageService","get","reducer","reducers","middleware","process","getDefaultMiddleware","subscribe","set","getState","dehydrateStore","useStyles","makeStyles","theme","root","background","padding","spacing","Logo","width","height","className","style","classes","alt","clsx","src","logo","defaultProps","undefined","Confirmation","content","onConfirm","onClose","open","useTranslation","t","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","color","onClick","autoFocus","useStore","selector","equality","useSelector","_","isFunction","state","isArray","pick","useWindowSize","isClient","isObject","window","getSize","innerWidth","innerHeight","useState","windowSize","setWindowSize","handleResize","useMount","addEventListener","useUnmount","removeEventListener","useActions","storeName","actions","storeActions","dispatch","useDispatch","reduce","accumulator","functionDefinition","functionName","inline","display","alignItems","props","loading","setLoading","children","disabled","variant","isMounted","useMountedState","propsToSpread","startIcon","endIcon","Box","a","CircularProgress","data-testid","size","error","palette","main","FileUploader","onSave","acceptedFiles","title","React","filename","setFilename","setOpen","flexDirection","filesLimit","maxFileSize","Infinity","files","name","showPreviews","Typography","message","justifyContent","jsonViewer","position","border","margin","minWidth","svgViewer","loadButton","bottom","right","svgButtonTopButtonContainer","picklist","assignButton","cards","flexWrap","alignContent","overflow","card","cursor","selectedCards","svgContainer","marginTop","marginLeft","marginRight","svg","objectFit","jsonView","Viewer","jsonContent","svgContent","picklistValue","picklistOptions","selectedSvgElements","setJsonContent","setSvgContent","setPicklistValue","setPicklistOptions","setSelectedCards","setSelectedSvgElements","reset","openConfirmation","setOpenConfirmation","openPopup","setOpenPopup","selectedCardsRef","useRef","current","selectedSvgElementsRef","useEffect","isEmpty","setTimeout","d3","selectAll","each","index","this","attr","on","Object","keys","length","id","selections","stroke","elem","readFileAsUrl","file","Promise","resolve","fileReader","FileReader","onload","result","readAsDataURL","readFileAsJson","text","JSON","parse","onJsonFileUpload","jsonFile","options","onSvgFileUpload","url","onCardClick","key","elementProps","onAssign","clonedJsonContent","cloneDeep","value","map","getCardContent","data","push","p","Select","defaultValue","onChange","event","target","option","MenuItem","Tooltip","IconButton","Visibility","Array","Card","CardContent","Check","Refresh","svgEl","document","getElementById","setAttribute","svgData","outerHTML","svgBlob","Blob","type","zip","JSZip","stringify","generateAsync","then","FileSaver","saveAs","fullScreen","pl","pr","marginBottom","outlineStyle","UserMenu","displayName","dropdowns","anchorEl","setAnchorEl","handleClose","hasDropdowns","filter","dropdown","currentTarget","onKeyDown","role","tabIndex","Menu","anchorOrigin","vertical","horizontal","elevation","getContentAnchorEl","keepMounted","Boolean","transformOrigin","handler","Icon","toolbar","paddingLeft","paddingRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","paddingTop","Main","dimensions","themeActions","isDark","AppBar","Toolbar","hide","Link","href","textDecoration","setMode","ToolViewer","Toast","Snackbar","autoHideDuration","Alert","severity","Context","createContext","noop","success","warning","info","ToastContext","orientation","orientationFragment","split","initialState","setState","stateRef","Provider","s","_event","reason","Root","ThemeProvider","createMuiTheme","CssBaseline","App","I18nextProvider","i18n","i18next","init","interpolation","escapeValue","lng","resources","en","common","commonEn","ReactDOM","render","$appData","localStorage","getItem","err","setItem","freeze","createAction","matchMedia","matches","primary","contrastText","secondary","createSlice","action","payload","extraReducers","assign","selecedCards","tool"],"mappings":"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","file":"static/js/main.0f2de6e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/carleton.0bbc27c1.svg\";","import logger from 'redux-logger';\nimport {\n    configureStore,\n    getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport { reducers } from '../slices';\nimport { storage as storageService } from '../../services';\n\nfunction rehydrateStore() {\n    return storageService.get();\n}\n\nfunction dehydrateStore(store) {\n    storageService.set(store.getState());\n}\n\nconst store = configureStore({\n    preloadedState: rehydrateStore(),\n    reducer: reducers,\n    middleware: process && process.env && process.env.NODE_ENV === 'development'\n        ? [\n            ...getDefaultMiddleware(),\n            logger,\n        ]\n        : [...getDefaultMiddleware()],\n});\n\nstore.subscribe(() => dehydrateStore(store));\n\nexport default store;\n","import React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport logo from '../../assets/images/carleton.svg';\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        background: 'white',\n        padding: theme.spacing(1),\n    },\n}));\n\nconst Logo = ({ width, height, className, style }) => {\n    const classes = useStyles();\n    return (\n        <img\n            alt='Carleton University'\n            className={clsx(className, classes.root)}\n            height={height}\n            src={logo}\n            style={style}\n            width={width}\n        />\n    );\n};\n\nLogo.propTypes = {\n    height: PropTypes.number,\n    width: PropTypes.number,\n    className: PropTypes.string,\n    style: PropTypes.object,\n};\n\nLogo.defaultProps = {\n    height: 64,\n    width: 250,\n    className: '',\n    style: undefined,\n};\n\nexport default Logo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from '@material-ui/core';\n\nfunction Confirmation({\n    content,\n    onConfirm,\n    onClose,\n    open,\n}) {\n    const [t] = useTranslation('common');\n    return (\n        <Dialog\n            onClose={onClose}\n            open={open}\n        >\n            <DialogTitle>{t('confirmation.title')}</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    {content}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    color='primary'\n                    onClick={onConfirm}\n                >\n                    {t('confirmation.ok')}\n                </Button>\n                <Button\n                    autoFocus\n                    color='primary'\n                    onClick={onClose}\n                >\n                    {t('confirmation.cancel')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmation.propTypes = {\n    content: PropTypes.oneOfType([\n        PropTypes.node,\n        PropTypes.string,\n    ]).isRequired,\n    onConfirm: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n};\n\nexport default Confirmation;\n","import { useSelector } from 'react-redux';\nimport _ from 'lodash';\n\nexport default function useStore(selector, equality) {\n    const store = useSelector(\n        _.isFunction(selector)\n            ? selector\n            : state => (!_.isArray(selector) ? state[selector] : _.pick(state, selector)),\n        equality,\n    );\n    return store || {};\n}\n","import { useState } from 'react';\nimport { useMount, useUnmount } from 'react-use';\nimport _ from 'lodash';\n\nexport default function useWindowSize() {\n    const isClient = _.isObject(window);\n\n    const getSize = () => ({\n        width: isClient ? window.innerWidth : undefined,\n        height: isClient ? window.innerHeight : undefined,\n    });\n\n    const [windowSize, setWindowSize] = useState(getSize);\n\n    const handleResize = () => setWindowSize(getSize());\n\n    useMount(() => {\n        if (isClient) {\n            window.addEventListener('resize', handleResize);\n        }\n    });\n\n    useUnmount(() => window.removeEventListener('resize', handleResize));\n\n    return windowSize;\n}\n","import { useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { actions as storeActions } from '../redux/slices';\n\nexport default function useActions(storeName) {\n    let actions = storeActions[storeName];\n    const dispatch = useDispatch();\n    actions = _.reduce(actions, (accumulator, functionDefinition, functionName) => {\n        accumulator[functionName] = (...args) => dispatch(functionDefinition(...args));\n        return accumulator;\n    }, {});\n    return actions || {};\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MuiButton from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport clsx from 'clsx';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useMountedState } from '../../hooks';\n\nexport const useStyles = makeStyles(() => ({\n    inline: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\nfunction Button(props) {\n    const classes = useStyles();\n    const [loading, setLoading] = useState(false);\n    const { className, children, onClick, disabled, inline, variant } = props;\n    const isMounted = useMountedState();\n    const propsToSpread = { ...props };\n    delete propsToSpread.className;\n    delete propsToSpread.disabled;\n    delete propsToSpread.onClick;\n    delete propsToSpread.inline;\n    delete propsToSpread.variant;\n    const { startIcon, endIcon } = propsToSpread;\n    delete propsToSpread.startIcon;\n    delete propsToSpread.endIcon;\n    return (\n        <Box\n            className={clsx({ [classes.inline]: inline })}\n            display='inline'\n        >\n            {\n                startIcon == null && endIcon == null\n                    ? (\n                        <>\n                            <MuiButton\n                                className={className}\n                                disabled={loading || disabled}\n                                onClick={\n                                    typeof onClick === 'function'\n                                        ? async () => {\n                                            setLoading(true);\n                                            try {\n                                                await onClick();\n                                            } catch (err) {} finally {\n                                                if (isMounted()) {\n                                                    setLoading(false);\n                                                }\n                                            }\n                                        }\n                                        : undefined\n                                }\n                                variant={!inline ? (variant || 'contained') : undefined}\n                                {...propsToSpread}\n                            >\n                                {!loading && !inline && children}\n                                {inline && children}\n                                {!inline && loading && (\n                                    <CircularProgress\n                                        data-testid='button-default-spinner'\n                                        size={25}\n                                    />\n                                )}\n                            </MuiButton>\n                            {loading && inline && (\n                                <CircularProgress\n                                    data-testid='button-inline-spinner'\n                                    size={35}\n                                />\n                            )}\n                        </>\n                    )\n                    : (\n                        <MuiButton\n                            className={className}\n                            disabled={loading || disabled}\n                            {...propsToSpread}\n                            endIcon={!loading ? endIcon : endIcon && (\n                                <CircularProgress\n                                    data-testid='button-start-icon-spinner'\n                                    size={25}\n                                />\n                            )}\n                            onClick={\n                                typeof onClick === 'function'\n                                    ? async () => {\n                                        setLoading(true);\n                                        try {\n                                            await onClick();\n                                        } catch (err) {} finally {\n                                            if (isMounted()) {\n                                                setLoading(false);\n                                            }\n                                        }\n                                    }\n                                    : undefined\n                            }\n                            startIcon={!loading ? startIcon : startIcon && (\n                                <CircularProgress\n                                    data-testid='button-end-icon-spinner'\n                                    size={18}\n                                />\n                            )}\n                            variant={variant}\n                        />\n                    )\n            }\n        </Box>\n    );\n}\n\nButton.propTypes = {\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    onClick: PropTypes.func,\n    inline: PropTypes.bool,\n    variant: PropTypes.string,\n};\n\nButton.defaultProps = {\n    onClick: undefined,\n    disabled: undefined,\n    className: '',\n    inline: false,\n    variant: undefined,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, makeStyles, Typography } from '@material-ui/core';\nimport { DropzoneDialog } from 'material-ui-dropzone';\nimport { useTranslation } from 'react-i18next';\nimport Button from '../Button';\n\nexport const useStyles = makeStyles(theme => ({ error: { color: theme.palette.error.main } }));\n\nconst FileUploader = ({\n    className,\n    style,\n    onSave,\n    error,\n    acceptedFiles,\n    title,\n}) => {\n    const classes = useStyles();\n    const [filename, setFilename] = React.useState('');\n    const [open, setOpen] = React.useState(false);\n    const [t] = useTranslation('common');\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSave = files => {\n        setOpen(false);\n        setFilename(files[0].name);\n        onSave(files);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    return (\n        <Box\n            alignItems='center'\n            className={className}\n            display='flex'\n            flexDirection='row'\n            style={style}\n        >\n            <Button\n                color='primary'\n                onClick={handleOpen}\n            >\n                {filename === '' ? title || t('fileUploader.chooseFile') : t('fileUploader.changeFile')}\n            </Button>\n            <DropzoneDialog\n                acceptedFiles={acceptedFiles}\n                filesLimit={1}\n                maxFileSize={Infinity}\n                onClose={handleClose}\n                onSave={handleSave}\n                open={open}\n                showPreviews\n            />\n            {error && <Typography className={classes.error}>{error.message}</Typography>}\n        </Box>\n    );\n};\n\nFileUploader.propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n    onSave: PropTypes.func.isRequired,\n    error: PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.bool,\n    ]),\n    acceptedFiles: PropTypes.array,\n    title: PropTypes.string,\n};\n\nFileUploader.defaultProps = {\n    className: '',\n    style: {},\n    error: undefined,\n    acceptedFiles: [],\n    title: undefined,\n};\n\nexport default FileUploader;\n","import React from 'react';\nimport {\n    Box,\n    IconButton,\n    Tooltip,\n    Select,\n    MenuItem,\n    Card,\n    CardContent,\n    Dialog,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SVG from 'react-inlinesvg';\nimport {\n    Check as CheckIcon,\n    Refresh as RefreshIcon,\n    GetApp as DownloadIcon,\n    Visibility as VisibilityIcon,\n} from '@material-ui/icons';\nimport Highlight from 'react-highlight';\nimport { useTranslation } from 'react-i18next';\nimport _ from 'lodash';\nimport clsx from 'clsx';\nimport * as d3 from 'd3';\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\nimport Button from '../Button';\nimport Confirmation from '../Confirmation';\nimport FileUploader from '../FileUploader';\nimport {\n    useStore,\n    useActions,\n} from '../../hooks';\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 10,\n    },\n    jsonViewer: {\n        position: 'relative',\n        border: '1px solid black',\n        height: '100%',\n        width: '100%',\n        margin: 10,\n        minWidth: 450,\n    },\n    svgViewer: {\n        position: 'relative',\n        border: '1px solid black',\n        height: '100%',\n        width: '100%',\n        margin: 10,\n        minWidth: 450,\n    },\n    loadButton: {\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        margin: 10,\n    },\n    svgButtonTopButtonContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    picklist: {\n        margin: 10,\n        minWidth: 150,\n    },\n    assignButton: { margin: 10 },\n    cards: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        alignContent: 'flex-start',\n        height: '90%',\n        overflow: 'auto',\n    },\n    card: {\n        margin: 10,\n        cursor: 'pointer',\n        border: '1px solid white',\n    },\n    selectedCards: { border: '1px solid tomato' },\n    svgContainer: {\n        background: '#ffffff',\n        marginTop: theme.spacing(5),\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        padding: theme.spacing(2),\n    },\n    svg: {\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover',\n        overflow: 'hidden',\n    },\n    jsonView: { padding: 10 },\n}));\n\nfunction Viewer() {\n    const classes = useStyles();\n    const [t] = useTranslation('common');\n    const {\n        jsonContent,\n        svgContent,\n        picklistValue,\n        picklistOptions,\n        selectedCards,\n        selectedSvgElements,\n    } = useStore('tool');\n    const {\n        setJsonContent,\n        setSvgContent,\n        setPicklistValue,\n        setPicklistOptions,\n        setSelectedCards,\n        setSelectedSvgElements,\n        reset,\n    } = useActions('tool');\n    const [openConfirmation, setOpenConfirmation] = React.useState(false);\n    const [openPopup, setOpenPopup] = React.useState(false);\n\n    const selectedCardsRef = React.useRef(null);\n    selectedCardsRef.current = selectedCards;\n\n    const selectedSvgElementsRef = React.useRef(null);\n    selectedSvgElementsRef.current = selectedSvgElements;\n\n    React.useEffect(() => {\n        if (!jsonContent && _.isEmpty(selectedCards)) return;\n        setTimeout(() => {\n            d3.select('g')\n                .selectAll('*')\n                .each(function(_, index) {\n                    d3.select(this).attr('id', `e-${index}`);\n                })\n                .on('click', function() {\n                    if (Object.keys(selectedCardsRef.current).length > 0) {\n                        const { id } = this;\n                        if (id in selectedSvgElementsRef.current) {\n                            const selections = { ...selectedSvgElementsRef.current };\n                            d3.select(this)\n                                .attr('stroke', selections[id].stroke);\n                            delete selections[id];\n                            setSelectedSvgElements(selections);\n                        } else {\n                            const selections = { ...selectedSvgElementsRef.current };\n                            const elem = d3.select(this);\n                            selections[id] = {\n                                id,\n                                stroke: elem.attr('stroke'),\n                            };\n                            setSelectedSvgElements(selections);\n                            elem.attr('stroke', 'tomato');\n                        }\n                    }\n                })\n                .attr('pointer-events', 'fill')\n                .style('cursor', 'pointer');\n        }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [svgContent, jsonContent]);\n\n    const readFileAsUrl = file => new Promise(resolve => {\n        const fileReader = new FileReader();\n        fileReader.onload = () => resolve(fileReader.result);\n        fileReader.readAsDataURL(file);\n    });\n\n    const clearSelections = () => {\n        setSelectedCards({});\n        _.each(selectedSvgElements, (elementProps, id) => {\n            const elem = d3.select(`#${id}`);\n            elem.attr('stroke', elementProps.stroke);\n        });\n        setSelectedSvgElements({});\n    };\n\n    const readFileAsJson = async file => {\n        const text = await file.text();\n        return JSON.parse(text);\n    };\n\n    const onJsonFileUpload = async files => {\n        const file = files[0];\n        const jsonFile = await readFileAsJson(file);\n        const options = Object.keys(jsonFile);\n        setPicklistOptions(options);\n        setJsonContent(jsonFile);\n    };\n\n    const onSvgFileUpload = async files => {\n        const file = files[0];\n        const url = await readFileAsUrl(file);\n        setSvgContent(url);\n    };\n\n    const onPicklistChange = event => {\n        setPicklistValue(event.target.value);\n        clearSelections();\n    };\n\n    const onCardClick = (index, key) => {\n        const selections = { ...selectedCardsRef.current };\n        if (index in selections) {\n            delete selections[index];\n        } else {\n            selections[index] = {\n                key,\n                index,\n            };\n        }\n        setSelectedCards(selections);\n        if (_.isEmpty(selections)) {\n            _.each(selectedSvgElementsRef.current, (elementProps, id) => {\n                d3.select(`#${id}`)\n                    .attr('stroke', elementProps.stroke);\n            });\n            setSelectedSvgElements({});\n        }\n    };\n\n    const onRefresh = () => {\n        setOpenConfirmation(true);\n    };\n\n    const onRefreshConfirm = () => {\n        setOpenConfirmation(false);\n        reset();\n    };\n\n    const onAssign = async () => {\n        if (_.isEmpty(selectedCardsRef.current) || _.isEmpty(selectedSvgElementsRef.current)) return;\n        await new Promise(resolve => {\n            const clonedJsonContent = _.cloneDeep(jsonContent);\n            _.each(selectedCardsRef.current, value => {\n                const { key, index } = value;\n                if (index === -1) {\n                    clonedJsonContent[key].svg = _.map(selectedSvgElementsRef.current, value => value.id);\n                } else {\n                    clonedJsonContent[key][index].svg = _.map(selectedSvgElementsRef.current, value => value.id);\n                }\n            });\n            setJsonContent(clonedJsonContent);\n            setTimeout(resolve, 200);\n        });\n    };\n\n    const getCardContent = data => _.reduce(data, (accumulator, value, key) => {\n        if (key === 'svg') return accumulator;\n        accumulator.push(\n            <Box\n                key={key}\n                p={0.5}\n            >\n                <b>{key}</b>\n                {`: ${value}`}\n            </Box>,\n        );\n        return accumulator;\n    }, []);\n\n    const showJson = () => {\n        setOpenPopup(true);\n    };\n\n    const onDownload = () => {\n        const elem = document.getElementById('svg-root');\n        const svgEl = elem.children[0];\n        svgEl.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        const svgData = svgEl.outerHTML;\n        const preface = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n';\n        const svgBlob = new Blob([preface, svgData], { type: 'image/svg+xml;charset=utf-8' });\n\n        const zip = JSZip();\n        zip.file('result.svg', svgBlob);\n        zip.file('result.json', JSON.stringify(jsonContent, null, 2));\n        zip.generateAsync({ type: 'blob' })\n            .then(content => {\n                FileSaver.saveAs(content, 'result.zip');\n            });\n    };\n\n    return (\n        <>\n            <Box className={classes.root}>\n                <Box className={classes.jsonViewer}>\n                    <Box>\n                        <Select\n                            className={classes.picklist}\n                            defaultValue={picklistValue}\n                            disabled={!(picklistOptions.length > 0)}\n                            onChange={onPicklistChange}\n                        >\n                            {picklistOptions.map((option, index) => (\n                                <MenuItem\n                                    key={index}\n                                    value={option}\n                                >\n                                    {option}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                        <Tooltip title={t('jsonViewer.showJson')}>\n                            <IconButton\n                                disabled={!jsonContent}\n                                onClick={showJson}\n                            >\n                                <VisibilityIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Box>\n                    {picklistValue && (\n                        <Box className={classes.cards}>\n                            {!Array.isArray(jsonContent[picklistValue]) && (\n                                <Card\n                                    className={clsx(classes.card, { [classes.selectedCards]: selectedCards[-1] })}\n                                    onClick={() => onCardClick(-1, picklistValue)}\n                                >\n                                    <CardContent>\n                                        {getCardContent(jsonContent[picklistValue])}\n                                    </CardContent>\n                                </Card>\n                            )}\n                            {Array.isArray(jsonContent[picklistValue]) && jsonContent[picklistValue].map((value, index) => (\n                                <Card\n                                    key={index}\n                                    className={clsx(classes.card, { [classes.selectedCards]: selectedCards[index] })}\n                                    onClick={() => onCardClick(index, picklistValue)}\n                                >\n                                    <CardContent>\n                                        {getCardContent(value)}\n                                    </CardContent>\n                                </Card>\n                            ))}\n                        </Box>\n                    )}\n                    <FileUploader\n                        acceptedFiles={['application/json']}\n                        className={classes.loadButton}\n                        onSave={onJsonFileUpload}\n                        title={t('jsonViewer.loadJson')}\n                    />\n                </Box>\n                <Box className={classes.svgViewer}>\n                    <Box className={classes.svgButtonTopButtonContainer}>\n                        <Button\n                            className={classes.assignButton}\n                            color='primary'\n                            disabled={_.isEmpty(selectedCardsRef.current) || _.isEmpty(selectedSvgElementsRef.current)}\n                            endIcon={<CheckIcon />}\n                            onClick={onAssign}\n                            variant='contained'\n                        >\n                            {t('svgViewer.assign')}\n                        </Button>\n                        <Box>\n                            <Tooltip title={t('svgViewer.reset')}>\n                                <IconButton\n                                    disabled={!jsonContent && !svgContent}\n                                    onClick={onRefresh}\n                                >\n                                    <RefreshIcon />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title={t('svgViewer.download')}>\n                                <IconButton\n                                    disabled={!jsonContent || !svgContent}\n                                    onClick={onDownload}\n                                >\n                                    <DownloadIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </Box>\n                    </Box>\n                    {svgContent && (\n                        <Box\n                            className={classes.svgContainer}\n                            id='svg-root'\n                        >\n                            <SVG\n                                className={classes.svg}\n                                src={svgContent}\n                            />\n                        </Box>\n                    )}\n                    <FileUploader\n                        acceptedFiles={['image/svg+xml']}\n                        className={classes.loadButton}\n                        onSave={onSvgFileUpload}\n                        title={t('svgViewer.loadSvg')}\n                    />\n                </Box>\n            </Box>\n            <Confirmation\n                content={t('confirmation.resetWarning')}\n                onClose={() => setOpenConfirmation(false)}\n                onConfirm={onRefreshConfirm}\n                open={openConfirmation}\n            />\n            <Dialog\n                fullScreen\n                onClose={() => setOpenPopup(false)}\n                open={openPopup}\n            >\n                <Box\n                    pl={1}\n                    pr={1}\n                >\n                    <Highlight className={clsx('json', classes.jsonView)}>\n                        {JSON.stringify(jsonContent, null, 2)}\n                    </Highlight>\n                </Box>\n            </Dialog>\n        </>\n    );\n}\n\nViewer.propTypes = {};\n\nViewer.defaultProps = {};\n\nexport default Viewer;\n","import React, { useState } from 'react';\nimport {\n    Menu,\n    MenuItem,\n    Box,\n    Typography,\n} from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(() => ({\n    root: {\n        marginBottom: 'auto',\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        outlineStyle: 'none',\n        cursor: 'pointer',\n        width: 180,\n        height: 64,\n    },\n}));\n\nfunction UserMenu({ displayName, dropdowns }) {\n    const [anchorEl, setAnchorEl] = useState(null);\n    const handleOpen = event => setAnchorEl(event.currentTarget);\n    const handleClose = () => setAnchorEl(null);\n    const classes = useStyles();\n    dropdowns = dropdowns.filter(dropdown => !!dropdown);\n    const hasDropdowns = dropdowns && dropdowns.length !== 0;\n\n    return (\n        <Box>\n            <Box\n                className={classes.root}\n                onClick={handleOpen}\n                onKeyDown={() => {}}\n                role='menuitem'\n                tabIndex={0}\n            >\n                <Typography variant='h6'>{displayName}</Typography>\n                {hasDropdowns && <ArrowDropDownIcon />}\n            </Box>\n            {hasDropdowns\n                && (\n                    <Menu\n                        anchorEl={anchorEl}\n                        anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'center',\n                        }}\n                        elevation={2}\n                        getContentAnchorEl={null}\n                        keepMounted\n                        onClose={handleClose}\n                        open={Boolean(anchorEl)}\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'center',\n                        }}\n                    >\n                        {dropdowns.map((dropdown, index) => (\n                            <MenuItem\n                                key={index}\n                                disabled={dropdown.disabled}\n                                onClick={(...args) => {\n                                    typeof dropdown.handler === 'function' && dropdown.handler(...args);\n                                    handleClose();\n                                }}\n                            >\n                                {dropdown.Icon}\n                                <Box\n                                    display='inline'\n                                    pl={2}\n                                >\n                                    {dropdown.title}\n                                </Box>\n                            </MenuItem>\n                        ))}\n                    </Menu>\n                )}\n        </Box>\n    );\n}\n\nUserMenu.propTypes = {\n    dropdowns: PropTypes.array,\n    displayName: PropTypes.string.isRequired,\n};\n\nUserMenu.defaultProps = { dropdowns: [] };\n\nexport default UserMenu;\n","import React from 'react';\nimport clsx from 'clsx';\nimport {\n    AppBar,\n    Toolbar,\n    Box,\n    Typography,\n    Link,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Brightness2 as LightModeIcon,\n    Flare as DarkModeIcon,\n} from '@material-ui/icons';\nimport { useTranslation } from 'react-i18next';\nimport Logo from '../Logo';\nimport Confirmation from '../Confirmation';\nimport {\n    useWindowSize,\n    useActions,\n    useStore,\n} from '../../hooks';\nimport ToolViewer from '../ToolViewer';\nimport UserMenu from './UserMenu';\n\nexport const useStyles = makeStyles(theme => ({\n    toolbar: {\n        paddingLeft: 0,\n        paddingRight: 0,\n    },\n    appBar: {\n        marginLeft: theme.spacing(2),\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n        // Todo need to use appBar height from theme\n        height: 64,\n        alignItems: 'center',\n    },\n    content: {\n        height: '100vh',\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        // TODO need to use appBar height from themes.\n        paddingTop: 64,\n    },\n}));\n\nfunction Main() {\n    const classes = useStyles();\n    const dimensions = useWindowSize();\n    const theme = useStore('theme');\n    const themeActions = useActions('theme');\n    const isDark = theme.palette.type === 'dark';\n    const [t] = useTranslation('common');\n    const [openConfirmation, setOpenConfirmation] = React.useState(false);\n\n    const switchThemeMode = () => themeActions.setMode(!isDark ? 'dark' : 'light');\n\n    return (\n        <>\n            <title>{t('title')}</title>\n            <AppBar position='fixed'>\n                <Toolbar className={classes.toolbar}>\n                    <Logo />\n                    <Box className={classes.appBar}>\n                        <Typography\n                            className={\n                                clsx(\n                                    { [classes.hide]: dimensions.width < 690 },\n                                )\n                            }\n                            variant='h5'\n                        >\n                            <Link\n                                color='inherit'\n                                href='/'\n                                style={{ textDecoration: 'none' }}\n                            >\n                                {t('appBar.title')}\n                            </Link>\n                        </Typography>\n                        <UserMenu\n                            displayName={t('appBar.settings')}\n                            dropdowns={[\n                                {\n                                    title: `${!isDark ? t('appBar.dark') : t('appBar.light')} ${t('appBar.theme')}`,\n                                    Icon: !isDark ? <LightModeIcon /> : <DarkModeIcon />,\n                                    handler: switchThemeMode,\n                                },\n                            ]}\n                        />\n                    </Box>\n                </Toolbar>\n            </AppBar>\n            <main className={classes.content}>\n                <ToolViewer />\n            </main>\n            <Confirmation\n                content={t('appBar.sessionClearWarning')}\n                onClose={() => setOpenConfirmation(false)}\n                onConfirm={() => {\n                    setOpenConfirmation(false);\n                }}\n                open={openConfirmation}\n            />\n        </>\n    );\n}\n\nexport default Main;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\n\nconst Toast = ({\n    vertical,\n    horizontal,\n    duration,\n    open,\n    type,\n    children,\n    onClose,\n}) => (\n    <Snackbar\n        anchorOrigin={{\n            vertical,\n            horizontal,\n        }}\n        autoHideDuration={duration}\n        onClose={onClose}\n        open={open}\n    >\n        <Alert\n            onClose={onClose}\n            severity={type}\n        >\n            {children}\n        </Alert>\n    </Snackbar>\n);\n\nToast.propTypes = {\n    vertical: PropTypes.oneOf(['top', 'bottom']).isRequired,\n    horizontal: PropTypes.oneOf(['left', 'right', 'center']).isRequired,\n    duration: PropTypes.number.isRequired,\n    open: PropTypes.bool.isRequired,\n    type: PropTypes.oneOf(['success', 'info', 'warning', 'error', undefined]).isRequired,\n    children: PropTypes.node.isRequired,\n    onClose: PropTypes.func.isRequired,\n};\n\nexport default Toast;\n","import React from 'react';\nimport { noop } from 'lodash';\nimport PropTypes from 'prop-types';\nimport Toast from '../Toast';\n\nconst Context = React.createContext({\n    error: noop,\n    success: noop,\n    warning: noop,\n    info: noop,\n});\n\nconst ToastContext = ({\n    duration = 6000,\n    orientation = 'bottom-right',\n    children,\n}) => {\n    const orientationFragment = orientation.split('-');\n    const initialState = {\n        open: false,\n        message: '',\n        type: 'info',\n        vertical: orientationFragment[0],\n        horizontal: orientationFragment[1],\n    };\n    const [state, setState] = React.useState(initialState);\n    const stateRef = React.useRef(initialState);\n    stateRef.current = state;\n    const handleClose = (_event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setState(s => ({\n            ...s,\n            open: false,\n        }));\n    };\n    const success = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'success',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    const warning = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'warning',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    const error = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'error',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    const info = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'info',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    return (\n        <Context.Provider\n            value={{\n                success,\n                error,\n                info,\n                warning,\n            }}\n        >\n            {children}\n            <Toast\n                duration={duration}\n                horizontal={state.horizontal}\n                onClose={handleClose}\n                open={state.open}\n                type={state.type}\n                vertical={state.vertical}\n            >\n                {state.message}\n            </Toast>\n        </Context.Provider>\n    );\n};\n\nexport const useToast = () => React.useContext(Context);\n\nToastContext.propTypes = {\n    duration: PropTypes.number,\n    orientation: PropTypes.string,\n    children: PropTypes.node.isRequired,\n};\n\nToastContext.defaultProps = {\n    duration: 6000,\n    orientation: 'bottom-right',\n};\n\nexport default ToastContext;\n","import React from 'react';\nimport { CssBaseline } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Main from '../Main';\nimport ToastProvider from '../ToastContext';\nimport { useStore } from '../../hooks';\n\nfunction Root() {\n    const theme = useStore('theme');\n\n    return (\n        <ThemeProvider theme={createMuiTheme(theme)}>\n            <ToastProvider orientation='bottom-left'>\n                <CssBaseline />\n                <Main />\n            </ToastProvider>\n        </ThemeProvider>\n\n    );\n}\n\nexport default Root;\n","import Root from './Root';\n\nexport default Root;\n","import store from './store';\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { I18nextProvider } from 'react-i18next';\nimport i18next from 'i18next';\nimport Root from './components/Root';\nimport store from './redux/store';\nimport commonEn from './translations/en/common.json';\n\ni18next.init({\n    interpolation: { escapeValue: false },\n    lng: 'en',\n    resources: { en: { common: commonEn } },\n});\n\nfunction App() {\n    return (\n        <I18nextProvider i18n={i18next}>\n            <ReduxProvider store={store}>\n                <Root />\n            </ReduxProvider>\n        </I18nextProvider>\n    );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import _ from 'lodash';\n\nclass StorageService {\n    get = () => {\n        try {\n            const $appData = localStorage.getItem('$appData');\n            if (typeof $appData === 'string' && $appData) {\n                return JSON.parse($appData);\n            }\n            return undefined;\n        } catch (err) {\n            return undefined;\n        }\n    }\n\n    getItem = key => _.get(this.get(), key, null)\n\n    set = data => {\n        try { localStorage.setItem('$appData', JSON.stringify(data)); } catch (err) {}\n    }\n}\n\nconst storageService = new StorageService();\n\nObject.freeze(storageService);\n\nexport default storageService;\n\nexport { StorageService };\n","import { createAction } from '@reduxjs/toolkit';\n\nconst reset = createAction('reset');\n\nexport { reset };\n","import { createSlice } from '@reduxjs/toolkit';\nimport { reset } from '../actions';\n\nconst initialState = {\n    palette: {\n        type: window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light',\n        primary: {\n            main: '#CF112D',\n            contrastText: '#ffffff',\n        },\n        secondary: {\n            main: '#4D4D4D',\n            contrastText: '#ffffff',\n        },\n    },\n};\n\nexport default createSlice({\n    name: 'theme',\n    initialState,\n    reducers: {\n        setMode: (state, action) => {\n            state.palette.type = action.payload;\n        },\n    },\n    extraReducers: {\n        [reset]: state => {\n            Object.assign(state, initialState);\n        },\n    },\n});\n","import { createSlice } from '@reduxjs/toolkit';\nimport { reset } from '../actions';\n\nconst initialState = {\n    jsonContent: '',\n    svgContent: '',\n    picklistValue: '',\n    picklistOptions: [],\n    selecedCards: {},\n    selectedSvgElements: {},\n};\n\nexport default createSlice({\n    name: 'tool',\n    initialState,\n    reducers: {\n        setJsonContent: (state, action) => {\n            state.jsonContent = action.payload;\n        },\n        setSvgContent: (state, action) => {\n            state.svgContent = action.payload;\n        },\n        setPicklistValue: (state, action) => {\n            state.picklistValue = action.payload;\n        },\n        setPicklistOptions: (state, action) => {\n            state.picklistOptions = action.payload;\n        },\n        setSelectedCards: (state, action) => {\n            state.selectedCards = action.payload;\n        },\n        setSelectedSvgElements: (state, action) => {\n            state.selectedSvgElements = action.payload;\n        },\n    },\n    extraReducers: {\n        [reset]: state => {\n            Object.assign(state, initialState);\n        },\n    },\n});\n","import _ from 'lodash';\nimport theme from './theme';\nimport tool from './tool';\nimport { reset } from '../actions';\n\nexport const actions = {\n    theme: theme.actions,\n    tool: _.assign(tool.actions, { reset }),\n};\n\nexport const reducers = {\n    theme: theme.reducer,\n    tool: tool.reducer,\n};\n"],"sourceRoot":""}