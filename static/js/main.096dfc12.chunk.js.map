{"version":3,"sources":["redux/store/store.js","components/Confirmation/Confirmation.js","hooks/useStore.js","hooks/useActions.js","components/ToolViewer/ToolViewer.js","components/Button/Button.js","components/FileUploader/FileUploader.js","components/Main/Main.js","components/Toast/Toast.js","components/ToastContext/ToastContext.js","components/Root/Root.js","components/Root/index.js","redux/store/index.js","index.js","services/StorageService.js","redux/actions/index.js","redux/slices/theme.js","redux/slices/tool.js","redux/slices/index.js"],"names":["store","configureStore","preloadedState","storageService","get","reducer","reducers","middleware","process","getDefaultMiddleware","subscribe","set","getState","dehydrateStore","Confirmation","content","onConfirm","onClose","open","useTranslation","t","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","color","onClick","autoFocus","useStore","selector","equality","useSelector","_","isFunction","state","isArray","pick","useActions","storeName","actions","storeActions","dispatch","useDispatch","reduce","accumulator","functionDefinition","functionName","useStyles","makeStyles","theme","root","height","width","display","alignItems","justifyContent","padding","jsonViewer","position","border","margin","minWidth","svgViewer","svgButtonTopButtonContainer","top","right","picklist","assignButton","cards","flexWrap","alignContent","overflow","card","flexDirection","cursor","previewCard","selectedCard","svgContainer","background","marginTop","spacing","marginLeft","marginRight","cardWarning","bottom","svg","objectFit","jsonView","cardContainer","button","textTransform","Viewer","svgFile","jsonFile","classes","jsonContent","originalJsonContent","svgContent","picklistValue","picklistOptions","selectedSvgElements","strokeMap","associatedCards","allSelected","setJsonContent","setSvgContent","setPicklistValue","setPicklistOptions","setSelectedCard","setSelectedSvgElements","setStrokeMap","setAssociatedCards","setAllSelected","setOriginalJsonContent","React","useState","confirmationAction","setConfirmationAction","openJsonPreview","setOpenJsonPreview","openConfirmation","setOpenConfirmation","selectedCardRef","useRef","current","selectedSvgElementsRef","strokeMapRef","associatedCardsRef","readFileAsJson","file","a","text","JSON","parse","readFileAsUrl","Promise","resolve","fileReader","FileReader","onload","result","readAsDataURL","isStrokesMapEmpty","isEmpty","parseJsonFile","options","Object","keys","filteredOptions","i","length","option","value","Array","push","parseSvgFile","url","useEffect","setTimeout","strokes","d3","select","selectAll","each","index","this","attr","on","id","selections","elem","stroke","removedId","console","log","isNil","clonedJsonContent","cloneDeep","key","filter","clonedAssociatedCards","unassign","map","assign","style","selected","svgSelections","svgElem","strokeInfo","jsonElem","hasSvg","svgMap","add","Set","has","onCardClick","getCardContent","data","Box","p","className","undefined","variant","Tooltip","title","IconButton","disabled","Visibility","forEach","cardContent","type","Card","clsx","CardContent","CardActions","Warning","filteredCards","Typography","getCards","pl","pt","src","fullScreen","pr","stringify","v","defaultProps","inline","props","loading","setLoading","children","isMounted","useMountedState","propsToSpread","startIcon","endIcon","CircularProgress","data-testid","size","error","palette","main","FileUploader","onSave","acceptedFiles","setOpen","filesLimit","maxFileSize","Infinity","files","showPreviews","message","transition","transitions","create","easing","sharp","duration","leavingScreen","buttonContainer","Main","setJsonFile","setSvgFile","reset","setIsReseted","isReseted","ToolViewer","svgEl","document","getElementById","setAttribute","svgData","outerHTML","svgBlob","Blob","zip","JSZip","generateAsync","then","FileSaver","saveAs","Toast","vertical","horizontal","Snackbar","anchorOrigin","autoHideDuration","Alert","severity","Context","createContext","noop","success","warning","info","ToastContext","orientation","orientationFragment","split","initialState","setState","stateRef","Provider","s","_event","reason","Root","ThemeProvider","createMuiTheme","CssBaseline","App","I18nextProvider","i18n","i18next","init","interpolation","escapeValue","lng","resources","en","common","commonEn","ReactDOM","render","$appData","localStorage","getItem","err","setItem","freeze","createAction","window","matchMedia","matches","primary","contrastText","secondary","createSlice","name","setMode","action","payload","extraReducers","tool"],"mappings":"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","file":"static/js/main.096dfc12.chunk.js","sourcesContent":["import logger from 'redux-logger';\nimport {\n    configureStore,\n    getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport { reducers } from '../slices';\nimport { storage as storageService } from '../../services';\n\nfunction rehydrateStore() {\n    return storageService.get();\n}\n\nfunction dehydrateStore(store) {\n    storageService.set(store.getState());\n}\n\nconst store = configureStore({\n    preloadedState: rehydrateStore(),\n    reducer: reducers,\n    middleware: process && process.env && process.env.NODE_ENV === 'development'\n        ? [\n            ...getDefaultMiddleware(),\n            logger,\n        ]\n        : [...getDefaultMiddleware()],\n});\n\nstore.subscribe(() => dehydrateStore(store));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from '@material-ui/core';\n\nfunction Confirmation({\n    content,\n    onConfirm,\n    onClose,\n    open,\n}) {\n    const [t] = useTranslation('common');\n    return (\n        <Dialog\n            onClose={onClose}\n            open={open}\n        >\n            <DialogTitle>{t('confirmation.title')}</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    {content}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    color='primary'\n                    onClick={onConfirm}\n                >\n                    {t('confirmation.ok')}\n                </Button>\n                <Button\n                    autoFocus\n                    color='primary'\n                    onClick={onClose}\n                >\n                    {t('confirmation.cancel')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmation.propTypes = {\n    content: PropTypes.oneOfType([\n        PropTypes.node,\n        PropTypes.string,\n    ]).isRequired,\n    onConfirm: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n};\n\nexport default Confirmation;\n","import { useSelector } from 'react-redux';\nimport _ from 'lodash';\n\nexport default function useStore(selector, equality) {\n    const store = useSelector(\n        _.isFunction(selector)\n            ? selector\n            : state => (!_.isArray(selector) ? state[selector] : _.pick(state, selector)),\n        equality,\n    );\n    return store || {};\n}\n","import { useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { actions as storeActions } from '../redux/slices';\n\nexport default function useActions(storeName) {\n    let actions = storeActions[storeName];\n    const dispatch = useDispatch();\n    actions = _.reduce(actions, (accumulator, functionDefinition, functionName) => {\n        accumulator[functionName] = (...args) => dispatch(functionDefinition(...args));\n        return accumulator;\n    }, {});\n    return actions || {};\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Box,\n    IconButton,\n    Tooltip,\n    Dialog,\n    Card,\n    CardContent,\n    CardActions,\n    Button,\n    Typography,\n} from '@material-ui/core';\nimport {\n    Visibility as VisibilityIcon,\n    Warning as WarningIcon,\n} from '@material-ui/icons';\nimport _ from 'lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SVG from 'react-inlinesvg';\nimport clsx from 'clsx';\nimport Highlight from 'react-highlight';\nimport * as d3 from 'd3';\nimport { useTranslation } from 'react-i18next';\nimport Confirmation from '../Confirmation';\nimport {\n    useStore,\n    useActions,\n} from '../../hooks';\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 10,\n    },\n    jsonViewer: {\n        position: 'relative',\n        border: '1px solid black',\n        height: '100%',\n        width: '100%',\n        margin: 10,\n        minWidth: 450,\n    },\n    svgViewer: {\n        position: 'relative',\n        border: '1px solid black',\n        height: '100%',\n        width: '100%',\n        margin: 10,\n        minWidth: 450,\n    },\n    svgButtonTopButtonContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        position: 'absolute',\n        top: 0,\n        right: 0,\n    },\n    picklist: {\n        margin: 10,\n        minWidth: 150,\n    },\n    assignButton: { margin: 10 },\n    cards: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        alignContent: 'flex-start',\n        height: '90%',\n        overflow: 'auto',\n    },\n    card: {\n        minWidth: 180,\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 10,\n        position: 'relative',\n        cursor: 'pointer',\n        border: '1px solid white',\n    },\n    previewCard: {\n        minWidth: 180,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        margin: 10,\n        border: '1px solid white',\n    },\n    selectedCard: { border: '1px solid tomato' },\n    svgContainer: {\n        background: '#ffffff',\n        marginTop: theme.spacing(8),\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        padding: theme.spacing(2),\n    },\n    cardWarning: {\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n    },\n    svg: {\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover',\n        overflow: 'hidden',\n    },\n    jsonView: { padding: 10 },\n    cardContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    button: {\n        textTransform: 'none',\n        margin: 5,\n    },\n}));\n\nfunction Viewer({ svgFile, jsonFile }) {\n    const classes = useStyles();\n    const [t] = useTranslation('common');\n    const {\n        jsonContent,\n        originalJsonContent,\n        svgContent,\n        picklistValue,\n        picklistOptions,\n        selectedCard,\n        selectedSvgElements,\n        strokeMap,\n        associatedCards,\n        allSelected,\n    } = useStore('tool');\n    const {\n        setJsonContent,\n        setSvgContent,\n        setPicklistValue,\n        setPicklistOptions,\n        setSelectedCard,\n        setSelectedSvgElements,\n        setStrokeMap,\n        setAssociatedCards,\n        setAllSelected,\n        setOriginalJsonContent,\n    } = useActions('tool');\n    const [confirmationAction, setConfirmationAction] = React.useState('');\n    const [openJsonPreview, setOpenJsonPreview] = React.useState(false);\n    const [openConfirmation, setOpenConfirmation] = React.useState(false);\n\n    const selectedCardRef = React.useRef(null);\n    selectedCardRef.current = selectedCard;\n\n    const selectedSvgElementsRef = React.useRef(null);\n    selectedSvgElementsRef.current = selectedSvgElements;\n\n    const strokeMapRef = React.useRef(null);\n    strokeMapRef.current = strokeMap;\n\n    const associatedCardsRef = React.useRef(null);\n    associatedCardsRef.current = associatedCards;\n\n    const readFileAsJson = async file => {\n        const text = await file.text();\n        return JSON.parse(text);\n    };\n\n    const readFileAsUrl = file => new Promise(resolve => {\n        const fileReader = new FileReader();\n        fileReader.onload = () => resolve(fileReader.result);\n        fileReader.readAsDataURL(file);\n    });\n\n    const assign = selections => {\n        if (_.isNil(selectedCardRef.current) || _.isEmpty(selections)) return;\n        const clonedJsonContent = _.cloneDeep(jsonContent);\n        const value = selectedCardRef.current;\n        const { key, index } = value;\n        clonedJsonContent[key][index].svg = _.map(selections, (_, key) => key);\n        setJsonContent(clonedJsonContent);\n        setSelectedSvgElements(selections);\n        const clonedAssociatedCards = _.cloneDeep(associatedCardsRef.current);\n        clonedAssociatedCards[`${key}-${index}`] = true;\n        setAssociatedCards(clonedAssociatedCards);\n    };\n\n    const unassign = (selections, removedId) => {\n        console.log(selections);\n        if (_.isNil(selectedCardRef.current) || _.isEmpty(selections)) return;\n        const clonedJsonContent = _.cloneDeep(jsonContent);\n        const value = selectedCardRef.current;\n        const { key, index } = value;\n        const { svg } = clonedJsonContent[key][index];\n        clonedJsonContent[key][index].svg = _.filter(svg, value => value !== removedId);\n        setJsonContent(clonedJsonContent);\n        delete selections[removedId];\n        setSelectedSvgElements(selections);\n        const clonedAssociatedCards = _.cloneDeep(associatedCardsRef.current);\n        if (_.isEmpty(clonedJsonContent[key][index].svg)) {\n            delete clonedAssociatedCards[`${key}-${index}`];\n        }\n        setAssociatedCards(clonedAssociatedCards);\n    };\n\n    const isStrokesMapEmpty = () => _.isEmpty(strokeMapRef.current);\n\n    const parseJsonFile = async file => {\n        const jsonFile = await readFileAsJson(file);\n        const options = Object.keys(jsonFile);\n        const filteredOptions = [];\n        for (let i = 0; i < options.length; ++i) {\n            const option = options[i];\n            const value = jsonFile[option];\n            if (Array.isArray(value)) {\n                filteredOptions.push(option);\n            }\n        }\n        setPicklistOptions(filteredOptions);\n        setJsonContent(jsonFile);\n        setOriginalJsonContent(jsonFile);\n        setPicklistValue(filteredOptions[0]);\n    };\n\n    const parseSvgFile = async file => {\n        const url = await readFileAsUrl(file);\n        setSvgContent(url);\n    };\n\n    React.useEffect(() => {\n        if (jsonFile) {\n            parseJsonFile(jsonFile);\n        }\n    }, [jsonFile]);\n\n    React.useEffect(() => {\n        if (svgFile) {\n            parseSvgFile(svgFile);\n        }\n    }, [svgFile]);\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            const strokes = {};\n            d3.select('#workspace-svg')\n                .select('g')\n                .selectAll('*')\n                .each(function(_, index) {\n                    d3.select(this).attr('id', `e-${index}`);\n                })\n                .on('click', function() {\n                    let { id } = this;\n                    id = `#${id}`;\n                    const selections = { ...selectedSvgElementsRef.current };\n                    const strokes = strokeMapRef.current;\n                    const elem = d3.select(this);\n                    if (id in selections) {\n                        elem.attr('stroke', strokes[id].stroke);\n                        unassign(selections, id);\n                    } else {\n                        selections[id] = true;\n                        elem.attr('stroke', 'tomato');\n                        assign(selections);\n                    }\n                })\n                .each(function() {\n                    let { id } = this;\n                    id = `#${id}`;\n                    const elem = d3.select(this);\n                    if (id in selectedSvgElementsRef.current) {\n                        elem.attr('stroke', 'tomato');\n                    }\n                    if (isStrokesMapEmpty()) {\n                        strokes[id] = {\n                            id,\n                            stroke: elem.attr('stroke'),\n                        };\n                    }\n                })\n                .attr('pointer-events', 'fill')\n                .style('cursor', 'pointer');\n            if (isStrokesMapEmpty()) {\n                setStrokeMap(strokes);\n            }\n        }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [svgContent, jsonContent]);\n\n    React.useEffect(() => {\n        const selected = selectedCardRef.current;\n        const svgSelections = {};\n        if (!_.isNil(selected)) {\n            const { key, index } = selected;\n            const jsonElem = jsonContent[key][index];\n            if (!_.isNil(jsonElem)) {\n                let hasSvg = true;\n                let { svg } = jsonElem;\n                if (!Array.isArray(svg)) {\n                    svg = [];\n                    hasSvg = false;\n                }\n                if (Array.isArray(svg)) {\n                    const svgMap = svg.reduce((accumulator, value) => {\n                        accumulator.add(value);\n                        return accumulator;\n                    }, new Set());\n                    d3.select('#workspace-svg')\n                        .select('g')\n                        .selectAll('*')\n                        .each(function() {\n                            let { id } = this;\n                            id = `#${id}`;\n                            const svgElem = d3.select(this);\n                            if (svgMap.has(id)) {\n                                svgSelections[id] = true;\n                                svgElem.attr('stroke', 'tomato');\n                            } else {\n                                if (id in svgSelections) {\n                                    delete svgSelections[id];\n                                }\n                                const strokeInfo = strokeMap[id];\n                                svgElem.attr('stroke', strokeInfo.stroke);\n                            }\n                        });\n                }\n                if (!hasSvg) {\n                    const clonedJsonContent = _.cloneDeep(jsonContent);\n                    const jsonElem = clonedJsonContent[key][index];\n                    jsonElem.svg = svg;\n                    setJsonContent(clonedJsonContent);\n                }\n            }\n        } else {\n            d3.select('#workspace-svg')\n                .select('g')\n                .selectAll('*')\n                .each(function() {\n                    let { id } = this;\n                    id = `#${id}`;\n                    const svgElem = d3.select(this);\n                    const strokeInfo = strokeMap[id];\n                    svgElem.attr('stroke', strokeInfo.stroke);\n                });\n        }\n        setSelectedSvgElements(svgSelections);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedCard]);\n\n    const onCardClick = (index, key) => {\n        const selection = { ...selectedCardRef.current };\n        if (selection.index === index) {\n            setSelectedCard(null);\n        } else {\n            setSelectedCard({\n                key,\n                index,\n            });\n        }\n    };\n\n    const onRefresh = () => {\n        setOpenConfirmation(true);\n        setConfirmationAction('reset');\n    };\n\n    const onRefreshConfirm = () => {\n        setOpenConfirmation(false);\n        setJsonContent(originalJsonContent);\n        setSelectedCard(null);\n        setAssociatedCards({});\n    };\n\n    const onClearAll = () => {\n        setOpenConfirmation(true);\n        setConfirmationAction('clearAll');\n    };\n\n    const onClearAllConfirm = () => {\n        setOpenConfirmation(false);\n        const clonedJsonContent = _.cloneDeep(jsonContent);\n        _.each(clonedJsonContent, value => {\n            if (Array.isArray(value)) {\n                _.each(value, v => {\n                    v.svg = [];\n                });\n            }\n        });\n        setJsonContent(clonedJsonContent);\n        setSelectedCard(null);\n        setAssociatedCards({});\n    };\n\n    const getCardContent = (picklistValue, data) => _.reduce(data, (accumulator, value, key) => {\n        if (Array.isArray(value)) return accumulator;\n        if (picklistValue === 'ports' && key === 'type') {\n            return accumulator;\n        }\n        accumulator.push(\n            <Box\n                key={key}\n                p={0.5}\n            >\n                <b>{key}</b>\n                {`: ${value}`}\n            </Box>,\n        );\n        return accumulator;\n    }, []);\n\n    const getCards = () => {\n        if (allSelected) {\n            return _.reduce(jsonContent, (accumulator, value, key) => {\n                if (Array.isArray(value)) {\n                    value.forEach((cardContent, index) => {\n                        if (key === 'ports' && cardContent.type !== 'output') return accumulator;\n                        accumulator.push(\n                            <Box\n                                key={`${key}-${index}`}\n                                className={classes.cardContainer}\n                            >\n                                <Card\n                                    className={clsx(classes.card, { [classes.selectedCard]: selectedCard && selectedCard.index === index && selectedCard.key === key })}\n                                    onClick={() => onCardClick(index, key)}\n                                >\n                                    <CardContent>{getCardContent(key, cardContent)}</CardContent>\n                                    {!(`${key}-${index}` in associatedCards) && <CardActions className={classes.cardWarning}><WarningIcon /></CardActions>}\n                                </Card>\n                            </Box>,\n                        );\n                    });\n                }\n                return accumulator;\n            }, []);\n        }\n        const cards = jsonContent[picklistValue];\n        if (Array.isArray(cards)) {\n            const filteredCards = cards.filter(card => {\n                if (picklistValue === 'ports' && card.type === 'input') return false;\n                return true;\n            });\n            if (_.isEmpty(filteredCards)) {\n                return (\n                    <Box p={4}>\n                        <Typography>There are no ports for this model.</Typography>\n                    </Box>\n                );\n            }\n            return filteredCards.reduce((accumulator, value, index) => {\n                accumulator.push(\n                    <Box\n                        key={index}\n                        className={classes.cardContainer}\n                    >\n                        <Card\n                            className={clsx(classes.card, { [classes.selectedCard]: selectedCard && selectedCard.index === index })}\n                            onClick={() => onCardClick(index, picklistValue)}\n                        >\n                            <CardContent>{getCardContent(picklistValue, value)}</CardContent>\n                            {!(`${picklistValue}-${index}` in associatedCards) && <CardActions className={classes.cardWarning}><WarningIcon /></CardActions>}\n                        </Card>\n                    </Box>,\n                );\n                return accumulator;\n            }, []);\n        }\n\n        return null;\n    };\n\n    return (\n        <>\n            <Box className={classes.root}>\n                <Box className={classes.jsonViewer}>\n                    <Box>\n                        <Box p={1}>\n                            <Button\n                                className={classes.button}\n                                color={allSelected ? 'primary' : undefined}\n                                onClick={() => {\n                                    setAllSelected(true);\n                                    setSelectedCard(null);\n                                }}\n                                variant='contained'\n                            >\n                                All\n                            </Button>\n                            {picklistOptions.map((option, index) => (\n                                <Button\n                                    key={index}\n                                    className={classes.button}\n                                    color={option === picklistValue && !allSelected ? 'primary' : undefined}\n                                    onClick={() => {\n                                        setPicklistValue(option);\n                                        setSelectedCard(null);\n                                        setAllSelected(false);\n                                    }}\n                                    variant='contained'\n                                >\n                                    {option === 'ports' ? 'output' : option}\n                                </Button>\n                            ))}\n                            <Tooltip title={t('jsonViewer.showJson')}>\n                                <IconButton\n                                    disabled={!jsonContent}\n                                    onClick={() => setOpenJsonPreview(true)}\n                                >\n                                    <VisibilityIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </Box>\n                    </Box>\n                    {picklistValue && (\n                        <Box className={classes.cards}>\n                            {getCards()}\n                        </Box>\n                    )}\n                    <Box\n                        pl={2}\n                        pt={1}\n                    >\n                        <Typography>Note: Import ports will be automatically associated.</Typography>\n                    </Box>\n                </Box>\n                <Box className={classes.svgViewer}>\n                    <Box className={classes.svgButtonTopButtonContainer}>\n                        <Box p={1}>\n                            <Button\n                                className={classes.button}\n                                color='primary'\n                                disabled={!jsonContent && !svgContent}\n                                onClick={onRefresh}\n                                variant='contained'\n                            >\n                                {t('svgViewer.reset')}\n                            </Button>\n                            <Button\n                                className={classes.button}\n                                color='primary'\n                                disabled={!jsonContent && !svgContent}\n                                onClick={onClearAll}\n                                variant='contained'\n                            >\n                                {t('svgViewer.clearAll')}\n                            </Button>\n                        </Box>\n                    </Box>\n                    {svgContent && (\n                        <Box\n                            className={classes.svgContainer}\n                            id='workspace-svg-container'\n                        >\n                            <SVG\n                                className={classes.svg}\n                                id='workspace-svg'\n                                src={svgContent}\n                            />\n                        </Box>\n                    )}\n                    <Dialog\n                        fullScreen\n                        onClose={() => setOpenJsonPreview(false)}\n                        open={openJsonPreview}\n                    >\n                        <Box\n                            pl={1}\n                            pr={1}\n                        >\n                            <Highlight className={clsx('json', classes.jsonView)}>\n                                {JSON.stringify(jsonContent, null, 2)}\n                            </Highlight>\n                        </Box>\n                    </Dialog>\n                </Box>\n            </Box>\n            <Confirmation\n                content={confirmationAction === 'reset' ? t('confirmation.resetWarning') : t('confirmation.clearAllWarning')}\n                onClose={() => setOpenConfirmation(false)}\n                onConfirm={confirmationAction === 'reset' ? onRefreshConfirm : onClearAllConfirm}\n                open={openConfirmation}\n            />\n        </>\n    );\n}\n\nViewer.propTypes = {\n    jsonFile: PropTypes.object.isRequired,\n    svgFile: PropTypes.object.isRequired,\n};\n\nViewer.defaultProps = {};\n\nexport default Viewer;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MuiButton from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport clsx from 'clsx';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useMountedState } from '../../hooks';\n\nexport const useStyles = makeStyles(() => ({\n    inline: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\nfunction Button(props) {\n    const classes = useStyles();\n    const [loading, setLoading] = useState(false);\n    const { className, children, onClick, disabled, inline, variant } = props;\n    const isMounted = useMountedState();\n    const propsToSpread = { ...props };\n    delete propsToSpread.className;\n    delete propsToSpread.disabled;\n    delete propsToSpread.onClick;\n    delete propsToSpread.inline;\n    delete propsToSpread.variant;\n    const { startIcon, endIcon } = propsToSpread;\n    delete propsToSpread.startIcon;\n    delete propsToSpread.endIcon;\n    return (\n        <Box\n            className={clsx({ [classes.inline]: inline })}\n            display='inline'\n        >\n            {\n                startIcon == null && endIcon == null\n                    ? (\n                        <>\n                            <MuiButton\n                                className={className}\n                                disabled={loading || disabled}\n                                onClick={\n                                    typeof onClick === 'function'\n                                        ? async () => {\n                                            setLoading(true);\n                                            try {\n                                                await onClick();\n                                            } catch (err) {} finally {\n                                                if (isMounted()) {\n                                                    setLoading(false);\n                                                }\n                                            }\n                                        }\n                                        : undefined\n                                }\n                                variant={!inline ? (variant || 'contained') : undefined}\n                                {...propsToSpread}\n                            >\n                                {!loading && !inline && children}\n                                {inline && children}\n                                {!inline && loading && (\n                                    <CircularProgress\n                                        data-testid='button-default-spinner'\n                                        size={25}\n                                    />\n                                )}\n                            </MuiButton>\n                            {loading && inline && (\n                                <CircularProgress\n                                    data-testid='button-inline-spinner'\n                                    size={35}\n                                />\n                            )}\n                        </>\n                    )\n                    : (\n                        <MuiButton\n                            className={className}\n                            disabled={loading || disabled}\n                            {...propsToSpread}\n                            endIcon={!loading ? endIcon : endIcon && (\n                                <CircularProgress\n                                    data-testid='button-start-icon-spinner'\n                                    size={25}\n                                />\n                            )}\n                            onClick={\n                                typeof onClick === 'function'\n                                    ? async () => {\n                                        setLoading(true);\n                                        try {\n                                            await onClick();\n                                        } catch (err) {} finally {\n                                            if (isMounted()) {\n                                                setLoading(false);\n                                            }\n                                        }\n                                    }\n                                    : undefined\n                            }\n                            startIcon={!loading ? startIcon : startIcon && (\n                                <CircularProgress\n                                    data-testid='button-end-icon-spinner'\n                                    size={18}\n                                />\n                            )}\n                            variant={variant}\n                        />\n                    )\n            }\n        </Box>\n    );\n}\n\nButton.propTypes = {\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    onClick: PropTypes.func,\n    inline: PropTypes.bool,\n    variant: PropTypes.string,\n};\n\nButton.defaultProps = {\n    onClick: undefined,\n    disabled: undefined,\n    className: '',\n    inline: false,\n    variant: undefined,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, makeStyles, Typography } from '@material-ui/core';\nimport { DropzoneDialog } from 'material-ui-dropzone';\nimport Button from '../Button';\n\nexport const useStyles = makeStyles(theme => ({ error: { color: theme.palette.error.main } }));\n\nconst FileUploader = ({\n    className,\n    style,\n    onSave,\n    error,\n    acceptedFiles,\n    title,\n}) => {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSave = files => {\n        setOpen(false);\n        onSave(files);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    return (\n        <Box\n            alignItems='center'\n            className={className}\n            display='flex'\n            flexDirection='row'\n            style={style}\n        >\n            <Button\n                color='primary'\n                onClick={handleOpen}\n            >\n                {title}\n            </Button>\n            <DropzoneDialog\n                acceptedFiles={acceptedFiles}\n                filesLimit={1}\n                maxFileSize={Infinity}\n                onClose={handleClose}\n                onSave={handleSave}\n                open={open}\n                showPreviews\n            />\n            {error && <Typography className={classes.error}>{error.message}</Typography>}\n        </Box>\n    );\n};\n\nFileUploader.propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n    onSave: PropTypes.func.isRequired,\n    error: PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.bool,\n    ]),\n    acceptedFiles: PropTypes.array,\n    title: PropTypes.string,\n};\n\nFileUploader.defaultProps = {\n    className: '',\n    style: {},\n    error: undefined,\n    acceptedFiles: [],\n    title: undefined,\n};\n\nexport default FileUploader;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Button } from '@material-ui/core';\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\nimport ToolViewer from '../ToolViewer';\nimport FileUploader from '../FileUploader';\nimport { useStore, useActions } from '../../hooks';\n\nexport const useStyles = makeStyles(theme => ({\n    content: {\n        height: '100vh',\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    buttonContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        margin: 30,\n    },\n    button: { marginRight: 5 },\n}));\n\nfunction Main() {\n    const classes = useStyles();\n    const [t] = useTranslation('common');\n    const [jsonFile, setJsonFile] = React.useState(null);\n    const [svgFile, setSvgFile] = React.useState(null);\n    const { reset, setIsReseted } = useActions('tool');\n    const { svgContent, jsonContent, isReseted } = useStore('tool');\n\n    React.useEffect(() => {\n        reset();\n    }, []);\n\n    React.useEffect(() => {\n        setJsonFile(null);\n        setSvgFile(null);\n    }, [isReseted]);\n\n    const onDownload = () => {\n        const elem = document.getElementById('workspace-svg-container');\n        const svgEl = elem.children[0];\n        svgEl.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        const svgData = svgEl.outerHTML;\n        const preface = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n';\n        const svgBlob = new Blob([preface, svgData], { type: 'image/svg+xml;charset=utf-8' });\n\n        const zip = JSZip();\n        zip.file('result.svg', svgBlob);\n        zip.file('result.json', JSON.stringify(jsonContent, null, 2));\n        zip.generateAsync({ type: 'blob' })\n            .then(content => {\n                FileSaver.saveAs(content, 'result.zip');\n            });\n    };\n\n    const onJsonUpload = files => {\n        setJsonFile(files[0]);\n        setIsReseted(false);\n    };\n\n    const onSvgUpload = files => {\n        setSvgFile(files[0]);\n        setIsReseted(false);\n    };\n\n    return (\n        <>\n            <title>{t('title')}</title>\n            <main className={classes.content}>\n                {(!isReseted) && (\n                    <ToolViewer\n                        jsonFile={jsonFile}\n                        svgFile={svgFile}\n                    />\n                )}\n                <Box className={classes.buttonContainer}>\n                    {!jsonContent && (\n                        <FileUploader\n                            acceptedFiles={['application/json']}\n                            className={classes.button}\n                            onSave={onJsonUpload}\n                            title={t('jsonViewer.loadJson')}\n                        />\n                    )}\n                    {!svgContent && (\n                        <FileUploader\n                            acceptedFiles={['image/svg+xml']}\n                            className={classes.button}\n                            onSave={onSvgUpload}\n                            title={t('svgViewer.loadSvg')}\n                        />\n                    )}\n                    {jsonContent && svgContent && (\n                        <Button\n                            className={classes.button}\n                            color='primary'\n                            onClick={onDownload}\n                            variant='contained'\n                        >\n                            Download\n                        </Button>\n                    )}\n                </Box>\n            </main>\n        </>\n    );\n}\n\nexport default Main;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\n\nconst Toast = ({\n    vertical,\n    horizontal,\n    duration,\n    open,\n    type,\n    children,\n    onClose,\n}) => (\n    <Snackbar\n        anchorOrigin={{\n            vertical,\n            horizontal,\n        }}\n        autoHideDuration={duration}\n        onClose={onClose}\n        open={open}\n    >\n        <Alert\n            onClose={onClose}\n            severity={type}\n        >\n            {children}\n        </Alert>\n    </Snackbar>\n);\n\nToast.propTypes = {\n    vertical: PropTypes.oneOf(['top', 'bottom']).isRequired,\n    horizontal: PropTypes.oneOf(['left', 'right', 'center']).isRequired,\n    duration: PropTypes.number.isRequired,\n    open: PropTypes.bool.isRequired,\n    type: PropTypes.oneOf(['success', 'info', 'warning', 'error', undefined]).isRequired,\n    children: PropTypes.node.isRequired,\n    onClose: PropTypes.func.isRequired,\n};\n\nexport default Toast;\n","import React from 'react';\nimport { noop } from 'lodash';\nimport PropTypes from 'prop-types';\nimport Toast from '../Toast';\n\nconst Context = React.createContext({\n    error: noop,\n    success: noop,\n    warning: noop,\n    info: noop,\n});\n\nconst ToastContext = ({\n    duration = 6000,\n    orientation = 'bottom-right',\n    children,\n}) => {\n    const orientationFragment = orientation.split('-');\n    const initialState = {\n        open: false,\n        message: '',\n        type: 'info',\n        vertical: orientationFragment[0],\n        horizontal: orientationFragment[1],\n    };\n    const [state, setState] = React.useState(initialState);\n    const stateRef = React.useRef(initialState);\n    stateRef.current = state;\n    const handleClose = (_event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setState(s => ({\n            ...s,\n            open: false,\n        }));\n    };\n    const success = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'success',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    const warning = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'warning',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    const error = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'error',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    const info = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'info',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    return (\n        <Context.Provider\n            value={{\n                success,\n                error,\n                info,\n                warning,\n            }}\n        >\n            {children}\n            <Toast\n                duration={duration}\n                horizontal={state.horizontal}\n                onClose={handleClose}\n                open={state.open}\n                type={state.type}\n                vertical={state.vertical}\n            >\n                {state.message}\n            </Toast>\n        </Context.Provider>\n    );\n};\n\nexport const useToast = () => React.useContext(Context);\n\nToastContext.propTypes = {\n    duration: PropTypes.number,\n    orientation: PropTypes.string,\n    children: PropTypes.node.isRequired,\n};\n\nToastContext.defaultProps = {\n    duration: 6000,\n    orientation: 'bottom-right',\n};\n\nexport default ToastContext;\n","import React from 'react';\nimport { CssBaseline } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Main from '../Main';\nimport ToastProvider from '../ToastContext';\nimport { useStore } from '../../hooks';\n\nfunction Root() {\n    const theme = useStore('theme');\n\n    return (\n        <ThemeProvider theme={createMuiTheme(theme)}>\n            <ToastProvider orientation='bottom-left'>\n                <CssBaseline />\n                <Main />\n            </ToastProvider>\n        </ThemeProvider>\n\n    );\n}\n\nexport default Root;\n","import Root from './Root';\n\nexport default Root;\n","import store from './store';\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { I18nextProvider } from 'react-i18next';\nimport i18next from 'i18next';\nimport Root from './components/Root';\nimport store from './redux/store';\nimport commonEn from './translations/en/common.json';\n\ni18next.init({\n    interpolation: { escapeValue: false },\n    lng: 'en',\n    resources: { en: { common: commonEn } },\n});\n\nfunction App() {\n    return (\n        <I18nextProvider i18n={i18next}>\n            <ReduxProvider store={store}>\n                <Root />\n            </ReduxProvider>\n        </I18nextProvider>\n    );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import _ from 'lodash';\n\nclass StorageService {\n    get = () => {\n        try {\n            const $appData = localStorage.getItem('$appData');\n            if (typeof $appData === 'string' && $appData) {\n                return JSON.parse($appData);\n            }\n            return undefined;\n        } catch (err) {\n            return undefined;\n        }\n    }\n\n    getItem = key => _.get(this.get(), key, null)\n\n    set = data => {\n        try { localStorage.setItem('$appData', JSON.stringify(data)); } catch (err) {}\n    }\n}\n\nconst storageService = new StorageService();\n\nObject.freeze(storageService);\n\nexport default storageService;\n\nexport { StorageService };\n","import { createAction } from '@reduxjs/toolkit';\n\nconst reset = createAction('reset');\n\nexport { reset };\n","import { createSlice } from '@reduxjs/toolkit';\nimport { reset } from '../actions';\n\nconst initialState = {\n    palette: {\n        type: window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light',\n        primary: {\n            main: '#CF112D',\n            contrastText: '#ffffff',\n        },\n        secondary: {\n            main: '#4D4D4D',\n            contrastText: '#ffffff',\n        },\n    },\n};\n\nexport default createSlice({\n    name: 'theme',\n    initialState,\n    reducers: {\n        setMode: (state, action) => {\n            state.palette.type = action.payload;\n        },\n    },\n    extraReducers: {\n        [reset]: state => {\n            Object.assign(state, initialState);\n        },\n    },\n});\n","import { createSlice } from '@reduxjs/toolkit';\nimport { reset } from '../actions';\n\nconst initialState = {\n    jsonFile: null,\n    svgFile: null,\n    jsonContent: '',\n    originalJsonContent: '',\n    svgContent: '',\n    picklistValue: '',\n    picklistOptions: [],\n    selectedCard: null,\n    selectedSvgElements: {},\n    strokeMap: {},\n    associatedCards: {},\n    allSelected: true,\n    isReseted: true,\n};\n\nexport default createSlice({\n    name: 'tool',\n    initialState,\n    reducers: {\n        setJsonContent: (state, action) => {\n            state.jsonContent = action.payload;\n        },\n        setOriginalJsonContent: (state, action) => {\n            state.originalJsonContent = action.payload;\n        },\n        setSvgContent: (state, action) => {\n            state.svgContent = action.payload;\n        },\n        setPicklistValue: (state, action) => {\n            state.picklistValue = action.payload;\n        },\n        setPicklistOptions: (state, action) => {\n            state.picklistOptions = action.payload;\n        },\n        setSelectedCard: (state, action) => {\n            state.selectedCard = action.payload;\n        },\n        setSelectedSvgElements: (state, action) => {\n            state.selectedSvgElements = action.payload;\n        },\n        setStrokeMap: (state, action) => {\n            state.strokeMap = action.payload;\n        },\n        setAssociatedCards: (state, action) => {\n            state.associatedCards = action.payload;\n        },\n        setIsReseted: (state, action) => {\n            state.isReseted = action.payload;\n        },\n        setAllSelected: (state, action) => {\n            state.allSelected = action.payload;\n        },\n    },\n    extraReducers: {\n        [reset]: state => {\n            Object.assign(state, initialState);\n        },\n    },\n});\n","import _ from 'lodash';\nimport theme from './theme';\nimport tool from './tool';\nimport { reset } from '../actions';\n\nexport const actions = {\n    theme: theme.actions,\n    tool: _.assign(tool.actions, { reset }),\n};\n\nexport const reducers = {\n    theme: theme.reducer,\n    tool: tool.reducer,\n};\n"],"sourceRoot":""}