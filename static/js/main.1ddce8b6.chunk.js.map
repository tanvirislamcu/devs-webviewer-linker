{"version":3,"sources":["redux/store/store.js","components/Confirmation/Confirmation.js","hooks/useStore.js","hooks/useActions.js","components/ToolViewer/ToolViewer.js","components/Button/Button.js","components/FileUploader/FileUploader.js","components/Main/Main.js","components/Toast/Toast.js","components/ToastContext/ToastContext.js","components/Root/Root.js","components/Root/index.js","redux/store/index.js","index.js","services/StorageService.js","redux/actions/index.js","redux/slices/theme.js","redux/slices/tool.js","redux/slices/index.js"],"names":["store","configureStore","preloadedState","storageService","get","reducer","reducers","middleware","process","getDefaultMiddleware","subscribe","set","getState","dehydrateStore","Confirmation","content","onConfirm","onClose","open","showCancel","useTranslation","t","Dialog","DialogContent","DialogContentText","DialogActions","Button","color","onClick","autoFocus","useStore","selector","equality","useSelector","_","isFunction","state","isArray","pick","useActions","storeName","actions","storeActions","dispatch","useDispatch","reduce","accumulator","functionDefinition","functionName","useStyles","makeStyles","theme","root","height","width","display","alignItems","justifyContent","padding","jsonViewer","position","border","margin","minWidth","svgViewer","svgButtonTopButtonContainer","top","right","picklist","assignButton","cards","flexWrap","alignContent","overflow","card","flexDirection","cursor","previewCard","selectedCard","svgContainer","background","marginTop","spacing","marginLeft","marginRight","cardWarning","bottom","svg","objectFit","jsonView","cardContainer","button","textTransform","Viewer","svgFile","jsonFile","classes","jsonContent","originalJsonContent","svgContent","picklistValue","picklistOptions","selectedSvgElements","strokeMap","associatedCards","allSelected","setJsonContent","setSvgContent","setPicklistValue","setPicklistOptions","setSelectedCard","setSelectedSvgElements","setStrokeMap","setAssociatedCards","setAllSelected","setOriginalJsonContent","React","useState","confirmationAction","setConfirmationAction","openJsonPreview","setOpenJsonPreview","openConfirmation","setOpenConfirmation","contentWarning","setContentWarning","svgLoaded","setSvgLoaded","idMap","setIdMap","selectedCardRef","useRef","current","selectedSvgElementsRef","strokeMapRef","associatedCardsRef","jsonContentRef","svgContentRef","idMapRef","readFileAsJson","file","a","text","JSON","parse","readFileAsUrl","Promise","resolve","fileReader","FileReader","onload","result","readAsDataURL","parseJsonFile","options","Object","keys","filteredOptions","i","length","option","value","Array","push","cloneDeep","associated","removedId","each","key","v","index","filteredSvg","filter","id","parseSvgFile","url","useEffect","setTimeout","strokes","isLoaded","ids","d3","select","selectAll","args","elem","this","attr","isNil","stroke","on","selections","isEmpty","clonedJsonContent","clonedAssociatedCards","unassign","map","assign","style","selected","svgSelections","svgElem","strokeInfo","jsonElem","hasSvg","svgMap","add","Set","has","onCardClick","getCardContent","data","Box","p","className","undefined","variant","IconButton","disabled","Visibility","forEach","cardContent","type","Card","clsx","CardContent","CardActions","Warning","filteredCards","Typography","getCards","pl","pt","src","fullScreen","pr","stringify","clonedOriginalContent","defaultProps","inline","props","loading","setLoading","children","isMounted","useMountedState","propsToSpread","startIcon","endIcon","CircularProgress","data-testid","size","error","palette","main","FileUploader","onSave","acceptedFiles","title","setOpen","filesLimit","maxFileSize","Infinity","files","showPreviews","message","transition","transitions","create","easing","sharp","duration","leavingScreen","buttonContainer","Main","setJsonFile","setSvgFile","reset","setIsReseted","isReseted","ToolViewer","svgEl","document","getElementById","setAttribute","svgData","outerHTML","svgBlob","Blob","zip","JSZip","generateAsync","then","FileSaver","saveAs","Toast","vertical","horizontal","Snackbar","anchorOrigin","autoHideDuration","Alert","severity","Context","createContext","noop","success","warning","info","ToastContext","orientation","orientationFragment","split","initialState","setState","stateRef","Provider","s","_event","reason","Root","ThemeProvider","createMuiTheme","CssBaseline","App","I18nextProvider","i18n","i18next","init","interpolation","escapeValue","lng","resources","en","common","commonEn","ReactDOM","render","$appData","localStorage","getItem","err","setItem","freeze","createAction","window","matchMedia","matches","primary","contrastText","secondary","createSlice","name","setMode","action","payload","extraReducers","tool"],"mappings":"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","file":"static/js/main.1ddce8b6.chunk.js","sourcesContent":["import logger from 'redux-logger';\nimport {\n    configureStore,\n    getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport { reducers } from '../slices';\nimport { storage as storageService } from '../../services';\n\nfunction rehydrateStore() {\n    return storageService.get();\n}\n\nfunction dehydrateStore(store) {\n    storageService.set(store.getState());\n}\n\nconst store = configureStore({\n    preloadedState: rehydrateStore(),\n    reducer: reducers,\n    middleware: process && process.env && process.env.NODE_ENV === 'development'\n        ? [\n            ...getDefaultMiddleware(),\n            logger,\n        ]\n        : [...getDefaultMiddleware()],\n});\n\nstore.subscribe(() => dehydrateStore(store));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n} from '@material-ui/core';\n\nfunction Confirmation({\n    content,\n    onConfirm,\n    onClose,\n    open,\n    showCancel,\n}) {\n    const [t] = useTranslation('common');\n    return (\n        <Dialog\n            onClose={onClose}\n            open={open}\n        >\n            <DialogContent>\n                <DialogContentText>\n                    {content}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    color='primary'\n                    onClick={onConfirm}\n                >\n                    {t('confirmation.ok')}\n                </Button>\n                {showCancel && (\n                    <Button\n                        autoFocus\n                        color='primary'\n                        onClick={onClose}\n                    >\n                        {t('confirmation.cancel')}\n                    </Button>\n                )}\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmation.propTypes = {\n    content: PropTypes.oneOfType([\n        PropTypes.node,\n        PropTypes.string,\n    ]).isRequired,\n    onConfirm: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    showCancel: PropTypes.bool.isRequired,\n};\n\nexport default Confirmation;\n","import { useSelector } from 'react-redux';\nimport _ from 'lodash';\n\nexport default function useStore(selector, equality) {\n    const store = useSelector(\n        _.isFunction(selector)\n            ? selector\n            : state => (!_.isArray(selector) ? state[selector] : _.pick(state, selector)),\n        equality,\n    );\n    return store || {};\n}\n","import { useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { actions as storeActions } from '../redux/slices';\n\nexport default function useActions(storeName) {\n    let actions = storeActions[storeName];\n    const dispatch = useDispatch();\n    actions = _.reduce(actions, (accumulator, functionDefinition, functionName) => {\n        accumulator[functionName] = (...args) => dispatch(functionDefinition(...args));\n        return accumulator;\n    }, {});\n    return actions || {};\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Box,\n    IconButton,\n    Dialog,\n    Card,\n    CardContent,\n    CardActions,\n    Button,\n    Typography,\n} from '@material-ui/core';\nimport {\n    Visibility as VisibilityIcon,\n    Warning as WarningIcon,\n} from '@material-ui/icons';\nimport _ from 'lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SVG from 'react-inlinesvg';\nimport clsx from 'clsx';\nimport Highlight from 'react-highlight';\nimport * as d3 from 'd3';\nimport { useTranslation } from 'react-i18next';\nimport Confirmation from '../Confirmation';\nimport {\n    useStore,\n    useActions,\n} from '../../hooks';\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 10,\n    },\n    jsonViewer: {\n        position: 'relative',\n        border: '1px solid black',\n        height: '100%',\n        width: '100%',\n        margin: 10,\n        minWidth: 450,\n    },\n    svgViewer: {\n        position: 'relative',\n        border: '1px solid black',\n        height: '100%',\n        width: '100%',\n        margin: 10,\n        minWidth: 450,\n    },\n    svgButtonTopButtonContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        position: 'absolute',\n        top: 0,\n        right: 0,\n    },\n    picklist: {\n        margin: 10,\n        minWidth: 150,\n    },\n    assignButton: { margin: 10 },\n    cards: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        alignContent: 'flex-start',\n        height: '90%',\n        overflow: 'auto',\n    },\n    card: {\n        minWidth: 180,\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 10,\n        position: 'relative',\n        cursor: 'pointer',\n        border: '1px solid white',\n    },\n    previewCard: {\n        minWidth: 180,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        margin: 10,\n        border: '1px solid white',\n    },\n    selectedCard: { border: '1px solid tomato' },\n    svgContainer: {\n        background: '#ffffff',\n        marginTop: theme.spacing(8),\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        padding: theme.spacing(2),\n    },\n    cardWarning: {\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n    },\n    svg: {\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover',\n        overflow: 'hidden',\n    },\n    jsonView: { padding: 10 },\n    cardContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    button: {\n        textTransform: 'none',\n        margin: 5,\n    },\n}));\n\nfunction Viewer({ svgFile, jsonFile }) {\n    const classes = useStyles();\n    const [t] = useTranslation('common');\n    const {\n        jsonContent,\n        originalJsonContent,\n        svgContent,\n        picklistValue,\n        picklistOptions,\n        selectedCard,\n        selectedSvgElements,\n        strokeMap,\n        associatedCards,\n        allSelected,\n    } = useStore('tool');\n    const {\n        setJsonContent,\n        setSvgContent,\n        setPicklistValue,\n        setPicklistOptions,\n        setSelectedCard,\n        setSelectedSvgElements,\n        setStrokeMap,\n        setAssociatedCards,\n        setAllSelected,\n        setOriginalJsonContent,\n    } = useActions('tool');\n    const [confirmationAction, setConfirmationAction] = React.useState('');\n    const [openJsonPreview, setOpenJsonPreview] = React.useState(false);\n    const [openConfirmation, setOpenConfirmation] = React.useState(false);\n    const [contentWarning, setContentWarning] = React.useState(false);\n    const [svgLoaded, setSvgLoaded] = React.useState(false);\n    const [idMap, setIdMap] = React.useState({});\n\n    const selectedCardRef = React.useRef(null);\n    selectedCardRef.current = selectedCard;\n\n    const selectedSvgElementsRef = React.useRef(null);\n    selectedSvgElementsRef.current = selectedSvgElements;\n\n    const strokeMapRef = React.useRef(null);\n    strokeMapRef.current = strokeMap;\n\n    const associatedCardsRef = React.useRef(null);\n    associatedCardsRef.current = associatedCards;\n\n    const jsonContentRef = React.useRef(null);\n    jsonContentRef.current = jsonContent;\n\n    const svgContentRef = React.useRef(null);\n    svgContentRef.current = svgContent;\n\n    const idMapRef = React.useRef(null);\n    idMapRef.current = idMap;\n\n    const readFileAsJson = async file => {\n        const text = await file.text();\n        return JSON.parse(text);\n    };\n\n    const readFileAsUrl = file => new Promise(resolve => {\n        const fileReader = new FileReader();\n        fileReader.onload = () => resolve(fileReader.result);\n        fileReader.readAsDataURL(file);\n    });\n\n    const assign = selections => {\n        if (_.isNil(selectedCardRef.current) || _.isEmpty(selections)) return;\n        const jsonContent = jsonContentRef.current;\n        const clonedJsonContent = _.cloneDeep(jsonContent);\n        const value = selectedCardRef.current;\n        const { key, index } = value;\n        clonedJsonContent[key][index].svg = _.map(selections, (_, key) => key);\n        setJsonContent(clonedJsonContent);\n        setSelectedSvgElements(selections);\n        const clonedAssociatedCards = _.cloneDeep(associatedCardsRef.current);\n        clonedAssociatedCards[`${key}-${index}`] = true;\n        setAssociatedCards(clonedAssociatedCards);\n    };\n\n    const unassign = (selections, removedId) => {\n        if (_.isNil(selectedCardRef.current) || _.isEmpty(selections)) return;\n        const jsonContent = jsonContentRef.current;\n        const clonedJsonContent = _.cloneDeep(jsonContent);\n        const value = selectedCardRef.current;\n        const { key, index } = value;\n        const { svg } = clonedJsonContent[key][index];\n        clonedJsonContent[key][index].svg = _.filter(svg, value => value !== removedId);\n        setJsonContent(clonedJsonContent);\n        delete selections[removedId];\n        setSelectedSvgElements(selections);\n        const clonedAssociatedCards = _.cloneDeep(associatedCardsRef.current);\n        if (_.isEmpty(clonedJsonContent[key][index].svg)) {\n            delete clonedAssociatedCards[`${key}-${index}`];\n        }\n        setAssociatedCards(clonedAssociatedCards);\n    };\n\n    const parseJsonFile = async file => {\n        const svgContent = svgContentRef.current;\n        const jsonFile = await readFileAsJson(file);\n        const options = Object.keys(jsonFile);\n        const filteredOptions = [];\n        for (let i = 0; i < options.length; ++i) {\n            const option = options[i];\n            const value = jsonFile[option];\n            if (Array.isArray(value)) {\n                filteredOptions.push(option);\n            }\n        }\n        setPicklistOptions(filteredOptions);\n        setOriginalJsonContent(_.cloneDeep(jsonFile));\n        setPicklistValue(filteredOptions[0]);\n        const associated = {};\n        let removedId = false;\n        if (svgContent) {\n            const idMap = idMapRef.current;\n            _.each(jsonFile, (value, key) => {\n                _.each(value, (v, index) => {\n                    const { svg } = v;\n                    if (Array.isArray(svg)) {\n                        const filteredSvg = svg.filter(id => {\n                            if (!(id in idMap)) {\n                                removedId = true;\n                                return false;\n                            }\n                            return true;\n                        });\n                        if (filteredSvg.length > 0) {\n                            associated[`${key}-${index}`] = true;\n                        }\n                        v.svg = filteredSvg;\n                    }\n                });\n            });\n        }\n        setAssociatedCards(associated);\n        if (removedId) {\n            setContentWarning(true);\n        }\n        setJsonContent(jsonFile);\n    };\n\n    const parseSvgFile = async file => {\n        const url = await readFileAsUrl(file);\n        setSvgContent(url);\n    };\n\n    React.useEffect(() => {\n        if (jsonFile) {\n            parseJsonFile(jsonFile);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [jsonFile]);\n\n    React.useEffect(() => {\n        if (svgFile) {\n            parseSvgFile(svgFile);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [svgFile]);\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            const strokes = {};\n            let isLoaded = false;\n            const ids = {};\n            d3.select('#workspace-svg')\n                .select('g')\n                .selectAll('*')\n                .each(function(...args) {\n                    const [, index] = args;\n                    const elem = d3.select(this);\n                    let id = elem.attr('id');\n                    if (_.isNil(id)) {\n                        id = `e-${index}`;\n                        elem.attr('id', id);\n                    }\n                    id = `#${id}`;\n                    strokes[id] = {\n                        id,\n                        stroke: elem.attr('stroke'),\n                    };\n                    ids[id] = true;\n                })\n                .on('click', function() {\n                    isLoaded = true;\n                    let { id } = this;\n                    id = `#${id}`;\n                    const selections = { ...selectedSvgElementsRef.current };\n                    const strokes = strokeMapRef.current;\n                    const elem = d3.select(this);\n                    if (id in selections) {\n                        elem.attr('stroke', strokes[id].stroke);\n                        unassign(selections, id);\n                    } else {\n                        selections[id] = true;\n                        elem.attr('stroke', 'tomato');\n                        assign(selections);\n                    }\n                })\n                .attr('pointer-events', 'fill')\n                .style('cursor', 'pointer');\n            if (isLoaded && !svgLoaded) {\n                setSvgLoaded(true);\n            }\n            setStrokeMap(strokes);\n            const jsonContent = _.cloneDeep(jsonContentRef.current);\n            if (jsonContent) {\n                const associated = {};\n                let removedId = false;\n                _.each(jsonContent, (value, key) => {\n                    _.each(value, (v, index) => {\n                        const { svg } = v;\n                        if (Array.isArray(svg)) {\n                            const filteredSvg = svg.filter(id => {\n                                if (!(id in ids)) {\n                                    removedId = true;\n                                    return false;\n                                }\n                                return true;\n                            });\n                            if (filteredSvg.length > 0) {\n                                associated[`${key}-${index}`] = true;\n                            }\n                            v.svg = filteredSvg;\n                        }\n                    });\n                });\n                setAssociatedCards(associated);\n                if (removedId) {\n                    setContentWarning(true);\n                }\n            }\n            setIdMap(ids);\n        }, 0);\n    }, [svgContent]);\n\n    React.useEffect(() => {\n        if (svgLoaded) {\n            d3.select('#workspace-svg')\n                .select('g')\n                .selectAll('*')\n                .each(function() {\n                    let { id } = this;\n                    id = `#${id}`;\n                    const elem = d3.select(this);\n                    if (id in selectedSvgElementsRef.current) {\n                        elem.attr('stroke', 'tomato');\n                    }\n                });\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [svgContent, jsonContent]);\n\n    React.useEffect(() => {\n        const selected = selectedCardRef.current;\n        const svgSelections = {};\n        if (!_.isNil(selected)) {\n            const { key, index } = selected;\n            const jsonContent = jsonContentRef.current;\n            const jsonElem = jsonContent[key][index];\n            if (!_.isNil(jsonElem)) {\n                let hasSvg = true;\n                let { svg } = jsonElem;\n                if (!Array.isArray(svg)) {\n                    svg = [];\n                    hasSvg = false;\n                }\n                if (Array.isArray(svg)) {\n                    const svgMap = svg.reduce((accumulator, value) => {\n                        accumulator.add(value);\n                        return accumulator;\n                    }, new Set());\n                    d3.select('#workspace-svg')\n                        .select('g')\n                        .selectAll('*')\n                        .each(function() {\n                            let { id } = this;\n                            id = `#${id}`;\n                            const svgElem = d3.select(this);\n                            if (svgMap.has(id)) {\n                                svgSelections[id] = true;\n                                svgElem.attr('stroke', 'tomato');\n                            } else {\n                                if (id in svgSelections) {\n                                    delete svgSelections[id];\n                                }\n                                const strokeInfo = strokeMapRef.current[id];\n                                svgElem.attr('stroke', strokeInfo.stroke);\n                            }\n                        });\n                }\n                if (!hasSvg) {\n                    const clonedJsonContent = _.cloneDeep(jsonContent);\n                    const jsonElem = clonedJsonContent[key][index];\n                    jsonElem.svg = svg;\n                    setJsonContent(clonedJsonContent);\n                }\n            }\n        } else {\n            d3.select('#workspace-svg')\n                .select('g')\n                .selectAll('*')\n                .each(function() {\n                    let { id } = this;\n                    id = `#${id}`;\n                    const svgElem = d3.select(this);\n                    const strokeInfo = strokeMapRef.current[id];\n                    svgElem.attr('stroke', strokeInfo.stroke);\n                });\n        }\n        setSelectedSvgElements(svgSelections);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedCard]);\n\n    const onCardClick = (index, key) => {\n        const selection = { ...selectedCardRef.current };\n        if (selection.index === index) {\n            setSelectedCard(null);\n        } else {\n            setSelectedCard({\n                key,\n                index,\n            });\n        }\n    };\n\n    const onRefresh = () => {\n        setOpenConfirmation(true);\n        setConfirmationAction('reset');\n    };\n\n    const onRefreshConfirm = () => {\n        setOpenConfirmation(false);\n        setSelectedCard(null);\n        const associated = {};\n        let removedId = false;\n        const clonedOriginalContent = _.cloneDeep(originalJsonContent);\n        if (svgContent) {\n            const idMap = idMapRef.current;\n            _.each(clonedOriginalContent, (value, key) => {\n                _.each(value, (v, index) => {\n                    const { svg } = v;\n                    if (Array.isArray(svg)) {\n                        const filteredSvg = svg.filter(id => {\n                            if (!(id in idMap)) {\n                                removedId = true;\n                                return false;\n                            }\n                            return true;\n                        });\n                        if (filteredSvg.length > 0) {\n                            associated[`${key}-${index}`] = true;\n                        }\n                        v.svg = filteredSvg;\n                    }\n                });\n            });\n        }\n        setAssociatedCards(associated);\n        if (removedId) {\n            setContentWarning(true);\n        }\n        setJsonContent(clonedOriginalContent);\n    };\n\n    const onClearAll = () => {\n        setOpenConfirmation(true);\n        setConfirmationAction('clearAll');\n    };\n\n    const onClearAllConfirm = () => {\n        setOpenConfirmation(false);\n        const jsonContent = jsonContentRef.current;\n        const clonedJsonContent = _.cloneDeep(jsonContent);\n        _.each(clonedJsonContent, value => {\n            if (Array.isArray(value)) {\n                _.each(value, v => {\n                    v.svg = [];\n                });\n            }\n        });\n        setJsonContent(clonedJsonContent);\n        setSelectedCard(null);\n        setAssociatedCards({});\n    };\n\n    const getCardContent = (picklistValue, data) => _.reduce(data, (accumulator, value, key) => {\n        if (Array.isArray(value)) return accumulator;\n        if (picklistValue === 'ports' && key === 'type') {\n            return accumulator;\n        }\n        accumulator.push(\n            <Box\n                key={key}\n                p={0.5}\n            >\n                <b>{key}</b>\n                {`: ${value}`}\n            </Box>,\n        );\n        return accumulator;\n    }, []);\n\n    const getCards = () => {\n        const jsonContent = jsonContentRef.current;\n        if (allSelected) {\n            return _.reduce(jsonContent, (accumulator, value, key) => {\n                if (Array.isArray(value)) {\n                    value.forEach((cardContent, index) => {\n                        if (key === 'ports' && cardContent.type !== 'output') return accumulator;\n                        accumulator.push(\n                            <Box\n                                key={`${key}-${index}`}\n                                className={classes.cardContainer}\n                            >\n                                <Card\n                                    className={clsx(classes.card, { [classes.selectedCard]: selectedCard && selectedCard.index === index && selectedCard.key === key })}\n                                    onClick={() => onCardClick(index, key)}\n                                >\n                                    <CardContent>{getCardContent(key, cardContent)}</CardContent>\n                                    {!(`${key}-${index}` in associatedCards) && <CardActions className={classes.cardWarning}><WarningIcon /></CardActions>}\n                                </Card>\n                            </Box>,\n                        );\n                    });\n                }\n                return accumulator;\n            }, []);\n        }\n        const cards = jsonContent[picklistValue];\n        if (Array.isArray(cards)) {\n            const filteredCards = cards.filter(card => {\n                if (picklistValue === 'ports' && card.type === 'input') return false;\n                return true;\n            });\n            if (_.isEmpty(filteredCards)) {\n                return (\n                    <Box p={4}>\n                        <Typography>There are no ports for this model.</Typography>\n                    </Box>\n                );\n            }\n            return filteredCards.reduce((accumulator, value, index) => {\n                accumulator.push(\n                    <Box\n                        key={index}\n                        className={classes.cardContainer}\n                    >\n                        <Card\n                            className={clsx(classes.card, { [classes.selectedCard]: selectedCard && selectedCard.index === index })}\n                            onClick={() => onCardClick(index, picklistValue)}\n                        >\n                            <CardContent>{getCardContent(picklistValue, value)}</CardContent>\n                            {!(`${picklistValue}-${index}` in associatedCards) && <CardActions className={classes.cardWarning}><WarningIcon /></CardActions>}\n                        </Card>\n                    </Box>,\n                );\n                return accumulator;\n            }, []);\n        }\n\n        return null;\n    };\n\n    return (\n        <>\n            <Box className={classes.root}>\n                <Box className={classes.jsonViewer}>\n                    <Box>\n                        <Box p={1}>\n                            <Button\n                                className={classes.button}\n                                color={allSelected ? 'primary' : undefined}\n                                onClick={() => {\n                                    setAllSelected(true);\n                                    setSelectedCard(null);\n                                }}\n                                variant='contained'\n                            >\n                                All\n                            </Button>\n                            {picklistOptions.map((option, index) => (\n                                <Button\n                                    key={index}\n                                    className={classes.button}\n                                    color={option === picklistValue && !allSelected ? 'primary' : undefined}\n                                    onClick={() => {\n                                        setPicklistValue(option);\n                                        setSelectedCard(null);\n                                        setAllSelected(false);\n                                    }}\n                                    variant='contained'\n                                >\n                                    {option === 'ports' ? 'output ports' : option}\n                                </Button>\n                            ))}\n                            <IconButton\n                                disabled={!jsonContent}\n                                onClick={() => setOpenJsonPreview(true)}\n                            >\n                                <VisibilityIcon />\n                            </IconButton>\n                        </Box>\n                    </Box>\n                    {picklistValue && (\n                        <Box className={classes.cards}>\n                            {getCards()}\n                        </Box>\n                    )}\n                    <Box\n                        pl={2}\n                        pt={1}\n                    >\n                        <Typography>Note: Input ports will be automatically associated.</Typography>\n                    </Box>\n                </Box>\n                <Box className={classes.svgViewer}>\n                    <Box className={classes.svgButtonTopButtonContainer}>\n                        <Box p={1}>\n                            <Button\n                                className={classes.button}\n                                color='primary'\n                                disabled={!jsonContent && !svgContent}\n                                onClick={onRefresh}\n                                variant='contained'\n                            >\n                                {t('svgViewer.reset')}\n                            </Button>\n                            <Button\n                                className={classes.button}\n                                color='primary'\n                                disabled={!jsonContent && !svgContent}\n                                onClick={onClearAll}\n                                variant='contained'\n                            >\n                                {t('svgViewer.clearAll')}\n                            </Button>\n                        </Box>\n                    </Box>\n                    {svgContent && (\n                        <Box\n                            className={classes.svgContainer}\n                            id='workspace-svg-container'\n                        >\n                            <SVG\n                                className={classes.svg}\n                                id='workspace-svg'\n                                src={svgContent}\n                            />\n                        </Box>\n                    )}\n                    <Dialog\n                        fullScreen\n                        onClose={() => setOpenJsonPreview(false)}\n                        open={openJsonPreview}\n                    >\n                        <Box\n                            pl={1}\n                            pr={1}\n                        >\n                            <Highlight className={clsx('json', classes.jsonView)}>\n                                {JSON.stringify(jsonContent, null, 2)}\n                            </Highlight>\n                        </Box>\n                    </Dialog>\n                </Box>\n            </Box>\n            <Confirmation\n                content={confirmationAction === 'reset' ? t('confirmation.resetWarning') : t('confirmation.clearAllWarning')}\n                onClose={() => setOpenConfirmation(false)}\n                onConfirm={confirmationAction === 'reset' ? onRefreshConfirm : onClearAllConfirm}\n                open={openConfirmation}\n                showCancel\n            />\n            <Confirmation\n                content='Errors were detected in associations between model structure elements and the diagram provided. They will be ignored.'\n                onClose={() => setContentWarning(false)}\n                onConfirm={() => setContentWarning(false)}\n                open={contentWarning}\n                showCancel={false}\n            />\n        </>\n    );\n}\n\nViewer.propTypes = {\n    jsonFile: PropTypes.object.isRequired,\n    svgFile: PropTypes.object.isRequired,\n};\n\nViewer.defaultProps = {};\n\nexport default Viewer;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MuiButton from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport clsx from 'clsx';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useMountedState } from '../../hooks';\n\nexport const useStyles = makeStyles(() => ({\n    inline: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\nfunction Button(props) {\n    const classes = useStyles();\n    const [loading, setLoading] = useState(false);\n    const { className, children, onClick, disabled, inline, variant } = props;\n    const isMounted = useMountedState();\n    const propsToSpread = { ...props };\n    delete propsToSpread.className;\n    delete propsToSpread.disabled;\n    delete propsToSpread.onClick;\n    delete propsToSpread.inline;\n    delete propsToSpread.variant;\n    const { startIcon, endIcon } = propsToSpread;\n    delete propsToSpread.startIcon;\n    delete propsToSpread.endIcon;\n    return (\n        <Box\n            className={clsx({ [classes.inline]: inline })}\n            display='inline'\n        >\n            {\n                startIcon == null && endIcon == null\n                    ? (\n                        <>\n                            <MuiButton\n                                className={className}\n                                disabled={loading || disabled}\n                                onClick={\n                                    typeof onClick === 'function'\n                                        ? async () => {\n                                            setLoading(true);\n                                            try {\n                                                await onClick();\n                                            } catch (err) {} finally {\n                                                if (isMounted()) {\n                                                    setLoading(false);\n                                                }\n                                            }\n                                        }\n                                        : undefined\n                                }\n                                variant={!inline ? (variant || 'contained') : undefined}\n                                {...propsToSpread}\n                            >\n                                {!loading && !inline && children}\n                                {inline && children}\n                                {!inline && loading && (\n                                    <CircularProgress\n                                        data-testid='button-default-spinner'\n                                        size={25}\n                                    />\n                                )}\n                            </MuiButton>\n                            {loading && inline && (\n                                <CircularProgress\n                                    data-testid='button-inline-spinner'\n                                    size={35}\n                                />\n                            )}\n                        </>\n                    )\n                    : (\n                        <MuiButton\n                            className={className}\n                            disabled={loading || disabled}\n                            {...propsToSpread}\n                            endIcon={!loading ? endIcon : endIcon && (\n                                <CircularProgress\n                                    data-testid='button-start-icon-spinner'\n                                    size={25}\n                                />\n                            )}\n                            onClick={\n                                typeof onClick === 'function'\n                                    ? async () => {\n                                        setLoading(true);\n                                        try {\n                                            await onClick();\n                                        } catch (err) {} finally {\n                                            if (isMounted()) {\n                                                setLoading(false);\n                                            }\n                                        }\n                                    }\n                                    : undefined\n                            }\n                            startIcon={!loading ? startIcon : startIcon && (\n                                <CircularProgress\n                                    data-testid='button-end-icon-spinner'\n                                    size={18}\n                                />\n                            )}\n                            variant={variant}\n                        />\n                    )\n            }\n        </Box>\n    );\n}\n\nButton.propTypes = {\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    onClick: PropTypes.func,\n    inline: PropTypes.bool,\n    variant: PropTypes.string,\n};\n\nButton.defaultProps = {\n    onClick: undefined,\n    disabled: undefined,\n    className: '',\n    inline: false,\n    variant: undefined,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, makeStyles, Typography } from '@material-ui/core';\nimport { DropzoneDialog } from 'material-ui-dropzone';\nimport Button from '../Button';\n\nexport const useStyles = makeStyles(theme => ({ error: { color: theme.palette.error.main } }));\n\nconst FileUploader = ({\n    className,\n    style,\n    onSave,\n    error,\n    acceptedFiles,\n    title,\n}) => {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSave = files => {\n        setOpen(false);\n        onSave(files);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    return (\n        <Box\n            alignItems='center'\n            className={className}\n            display='flex'\n            flexDirection='row'\n            style={style}\n        >\n            <Button\n                color='primary'\n                onClick={handleOpen}\n            >\n                {title}\n            </Button>\n            <DropzoneDialog\n                acceptedFiles={acceptedFiles}\n                filesLimit={1}\n                maxFileSize={Infinity}\n                onClose={handleClose}\n                onSave={handleSave}\n                open={open}\n                showPreviews\n            />\n            {error && <Typography className={classes.error}>{error.message}</Typography>}\n        </Box>\n    );\n};\n\nFileUploader.propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n    onSave: PropTypes.func.isRequired,\n    error: PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.bool,\n    ]),\n    acceptedFiles: PropTypes.array,\n    title: PropTypes.string,\n};\n\nFileUploader.defaultProps = {\n    className: '',\n    style: {},\n    error: undefined,\n    acceptedFiles: [],\n    title: undefined,\n};\n\nexport default FileUploader;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport { Box, Button } from '@material-ui/core';\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\nimport ToolViewer from '../ToolViewer';\nimport FileUploader from '../FileUploader';\nimport { useStore, useActions } from '../../hooks';\n\nexport const useStyles = makeStyles(theme => ({\n    content: {\n        height: '100vh',\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    buttonContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        margin: 30,\n    },\n    button: { marginRight: 5 },\n}));\n\nfunction Main() {\n    const classes = useStyles();\n    const [t] = useTranslation('common');\n    const [jsonFile, setJsonFile] = React.useState(null);\n    const [svgFile, setSvgFile] = React.useState(null);\n    const { reset, setIsReseted } = useActions('tool');\n    const { svgContent, jsonContent, isReseted } = useStore('tool');\n\n    React.useEffect(() => {\n        reset();\n    }, []);\n\n    React.useEffect(() => {\n        setJsonFile(null);\n        setSvgFile(null);\n    }, [isReseted]);\n\n    const onDownload = () => {\n        const elem = document.getElementById('workspace-svg-container');\n        const svgEl = elem.children[0];\n        svgEl.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        const svgData = svgEl.outerHTML;\n        const preface = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n';\n        const svgBlob = new Blob([preface, svgData], { type: 'image/svg+xml;charset=utf-8' });\n\n        const zip = JSZip();\n        zip.file('result.svg', svgBlob);\n        zip.file('result.json', JSON.stringify(jsonContent, null, 2));\n        zip.generateAsync({ type: 'blob' })\n            .then(content => {\n                FileSaver.saveAs(content, 'result.zip');\n            });\n    };\n\n    const onJsonUpload = files => {\n        setJsonFile(files[0]);\n        setIsReseted(false);\n    };\n\n    const onSvgUpload = files => {\n        setSvgFile(files[0]);\n        setIsReseted(false);\n    };\n\n    return (\n        <>\n            <title>{t('title')}</title>\n            <main className={classes.content}>\n                {(!isReseted) && (\n                    <ToolViewer\n                        jsonFile={jsonFile}\n                        svgFile={svgFile}\n                    />\n                )}\n                <Box className={classes.buttonContainer}>\n                    {!jsonContent && (\n                        <FileUploader\n                            acceptedFiles={['application/json']}\n                            className={classes.button}\n                            onSave={onJsonUpload}\n                            title={t('jsonViewer.loadJson')}\n                        />\n                    )}\n                    {!svgContent && (\n                        <FileUploader\n                            acceptedFiles={['image/svg+xml']}\n                            className={classes.button}\n                            onSave={onSvgUpload}\n                            title={t('svgViewer.loadSvg')}\n                        />\n                    )}\n                    {jsonContent && svgContent && (\n                        <Button\n                            className={classes.button}\n                            color='primary'\n                            onClick={onDownload}\n                            variant='contained'\n                        >\n                            Download\n                        </Button>\n                    )}\n                </Box>\n            </main>\n        </>\n    );\n}\n\nexport default Main;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\n\nconst Toast = ({\n    vertical,\n    horizontal,\n    duration,\n    open,\n    type,\n    children,\n    onClose,\n}) => (\n    <Snackbar\n        anchorOrigin={{\n            vertical,\n            horizontal,\n        }}\n        autoHideDuration={duration}\n        onClose={onClose}\n        open={open}\n    >\n        <Alert\n            onClose={onClose}\n            severity={type}\n        >\n            {children}\n        </Alert>\n    </Snackbar>\n);\n\nToast.propTypes = {\n    vertical: PropTypes.oneOf(['top', 'bottom']).isRequired,\n    horizontal: PropTypes.oneOf(['left', 'right', 'center']).isRequired,\n    duration: PropTypes.number.isRequired,\n    open: PropTypes.bool.isRequired,\n    type: PropTypes.oneOf(['success', 'info', 'warning', 'error', undefined]).isRequired,\n    children: PropTypes.node.isRequired,\n    onClose: PropTypes.func.isRequired,\n};\n\nexport default Toast;\n","import React from 'react';\nimport { noop } from 'lodash';\nimport PropTypes from 'prop-types';\nimport Toast from '../Toast';\n\nconst Context = React.createContext({\n    error: noop,\n    success: noop,\n    warning: noop,\n    info: noop,\n});\n\nconst ToastContext = ({\n    duration = 6000,\n    orientation = 'bottom-right',\n    children,\n}) => {\n    const orientationFragment = orientation.split('-');\n    const initialState = {\n        open: false,\n        message: '',\n        type: 'info',\n        vertical: orientationFragment[0],\n        horizontal: orientationFragment[1],\n    };\n    const [state, setState] = React.useState(initialState);\n    const stateRef = React.useRef(initialState);\n    stateRef.current = state;\n    const handleClose = (_event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setState(s => ({\n            ...s,\n            open: false,\n        }));\n    };\n    const success = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'success',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    const warning = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'warning',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    const error = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'error',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    const info = (message, orientation) => {\n        orientation = orientation || `${stateRef.current.vertical}-${stateRef.current.horizontal}`;\n        const orientationFragment = orientation.split('-');\n        setState(s => ({\n            ...s,\n            open: true,\n            message,\n            type: 'info',\n            vertical: orientationFragment[0],\n            horizontal: orientationFragment[1],\n        }));\n    };\n    return (\n        <Context.Provider\n            value={{\n                success,\n                error,\n                info,\n                warning,\n            }}\n        >\n            {children}\n            <Toast\n                duration={duration}\n                horizontal={state.horizontal}\n                onClose={handleClose}\n                open={state.open}\n                type={state.type}\n                vertical={state.vertical}\n            >\n                {state.message}\n            </Toast>\n        </Context.Provider>\n    );\n};\n\nexport const useToast = () => React.useContext(Context);\n\nToastContext.propTypes = {\n    duration: PropTypes.number,\n    orientation: PropTypes.string,\n    children: PropTypes.node.isRequired,\n};\n\nToastContext.defaultProps = {\n    duration: 6000,\n    orientation: 'bottom-right',\n};\n\nexport default ToastContext;\n","import React from 'react';\nimport { CssBaseline } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Main from '../Main';\nimport ToastProvider from '../ToastContext';\nimport { useStore } from '../../hooks';\n\nfunction Root() {\n    const theme = useStore('theme');\n\n    return (\n        <ThemeProvider theme={createMuiTheme(theme)}>\n            <ToastProvider orientation='bottom-left'>\n                <CssBaseline />\n                <Main />\n            </ToastProvider>\n        </ThemeProvider>\n\n    );\n}\n\nexport default Root;\n","import Root from './Root';\n\nexport default Root;\n","import store from './store';\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { I18nextProvider } from 'react-i18next';\nimport i18next from 'i18next';\nimport Root from './components/Root';\nimport store from './redux/store';\nimport commonEn from './translations/en/common.json';\n\ni18next.init({\n    interpolation: { escapeValue: false },\n    lng: 'en',\n    resources: { en: { common: commonEn } },\n});\n\nfunction App() {\n    return (\n        <I18nextProvider i18n={i18next}>\n            <ReduxProvider store={store}>\n                <Root />\n            </ReduxProvider>\n        </I18nextProvider>\n    );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import _ from 'lodash';\n\nclass StorageService {\n    get = () => {\n        try {\n            const $appData = localStorage.getItem('$appData');\n            if (typeof $appData === 'string' && $appData) {\n                return JSON.parse($appData);\n            }\n            return undefined;\n        } catch (err) {\n            return undefined;\n        }\n    }\n\n    getItem = key => _.get(this.get(), key, null)\n\n    set = data => {\n        try { localStorage.setItem('$appData', JSON.stringify(data)); } catch (err) {}\n    }\n}\n\nconst storageService = new StorageService();\n\nObject.freeze(storageService);\n\nexport default storageService;\n\nexport { StorageService };\n","import { createAction } from '@reduxjs/toolkit';\n\nconst reset = createAction('reset');\n\nexport { reset };\n","import { createSlice } from '@reduxjs/toolkit';\nimport { reset } from '../actions';\n\nconst initialState = {\n    palette: {\n        type: window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light',\n        primary: {\n            main: '#CF112D',\n            contrastText: '#ffffff',\n        },\n        secondary: {\n            main: '#4D4D4D',\n            contrastText: '#ffffff',\n        },\n    },\n};\n\nexport default createSlice({\n    name: 'theme',\n    initialState,\n    reducers: {\n        setMode: (state, action) => {\n            state.palette.type = action.payload;\n        },\n    },\n    extraReducers: {\n        [reset]: state => {\n            Object.assign(state, initialState);\n        },\n    },\n});\n","import { createSlice } from '@reduxjs/toolkit';\nimport { reset } from '../actions';\n\nconst initialState = {\n    jsonFile: null,\n    svgFile: null,\n    jsonContent: '',\n    originalJsonContent: '',\n    svgContent: '',\n    picklistValue: '',\n    picklistOptions: [],\n    selectedCard: null,\n    selectedSvgElements: {},\n    strokeMap: {},\n    associatedCards: {},\n    allSelected: true,\n    isReseted: true,\n};\n\nexport default createSlice({\n    name: 'tool',\n    initialState,\n    reducers: {\n        setJsonContent: (state, action) => {\n            state.jsonContent = action.payload;\n        },\n        setOriginalJsonContent: (state, action) => {\n            state.originalJsonContent = action.payload;\n        },\n        setSvgContent: (state, action) => {\n            state.svgContent = action.payload;\n        },\n        setPicklistValue: (state, action) => {\n            state.picklistValue = action.payload;\n        },\n        setPicklistOptions: (state, action) => {\n            state.picklistOptions = action.payload;\n        },\n        setSelectedCard: (state, action) => {\n            state.selectedCard = action.payload;\n        },\n        setSelectedSvgElements: (state, action) => {\n            state.selectedSvgElements = action.payload;\n        },\n        setStrokeMap: (state, action) => {\n            state.strokeMap = action.payload;\n        },\n        setAssociatedCards: (state, action) => {\n            state.associatedCards = action.payload;\n        },\n        setIsReseted: (state, action) => {\n            state.isReseted = action.payload;\n        },\n        setAllSelected: (state, action) => {\n            state.allSelected = action.payload;\n        },\n    },\n    extraReducers: {\n        [reset]: state => {\n            Object.assign(state, initialState);\n        },\n    },\n});\n","import _ from 'lodash';\nimport theme from './theme';\nimport tool from './tool';\nimport { reset } from '../actions';\n\nexport const actions = {\n    theme: theme.actions,\n    tool: _.assign(tool.actions, { reset }),\n};\n\nexport const reducers = {\n    theme: theme.reducer,\n    tool: tool.reducer,\n};\n"],"sourceRoot":""}