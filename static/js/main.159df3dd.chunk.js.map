{"version":3,"sources":["redux/store/store.js","hooks/useStore.js","hooks/useActions.js","components/ToolViewer/ToolViewer.js","components/FileUploader/FileUploader.js","components/Main/Main.js","components/Root/Root.js","components/Root/index.js","redux/store/index.js","index.js","redux/actions/index.js","redux/slices/tool.js","redux/slices/index.js","services/StorageService.js"],"names":["store","configureStore","preloadedState","storageService","get","reducer","reducers","middleware","process","getDefaultMiddleware","subscribe","set","getState","dehydrateStore","useStore","selector","equality","useSelector","_","isFunction","state","isArray","pick","useActions","storeName","actions","storeActions","dispatch","useDispatch","reduce","accumulator","functionDefinition","functionName","useStyles","makeStyles","theme","root","height","width","display","alignItems","justifyContent","padding","jsonViewer","position","border","margin","minWidth","svgViewer","svgButtonTopButtonContainer","top","right","picklist","assignButton","cards","flexWrap","alignContent","overflow","card","flexDirection","cursor","previewCard","selectedCard","svgContainer","background","marginTop","spacing","marginLeft","marginRight","cardWarning","bottom","svg","objectFit","jsonView","cardContainer","button","textTransform","Confirmation","content","onConfirm","onClose","open","showCancel","Dialog","DialogContent","DialogContentText","DialogActions","Button","color","onClick","autoFocus","Viewer","svgFile","jsonFile","classes","jsonContent","originalJsonContent","svgContent","picklistValue","picklistOptions","selectedSvgElements","strokeMap","associatedCards","allSelected","setJsonContent","setSvgContent","setPicklistValue","setPicklistOptions","setSelectedCard","setSelectedSvgElements","setStrokeMap","setAssociatedCards","setAllSelected","setOriginalJsonContent","React","useState","confirmationAction","setConfirmationAction","openConfirmation","setOpenConfirmation","contentWarning","setContentWarning","svgLoaded","setSvgLoaded","idMap","setIdMap","selectedCardRef","useRef","current","selectedSvgElementsRef","strokeMapRef","associatedCardsRef","jsonContentRef","svgContentRef","idMapRef","readFileAsJson","file","a","text","JSON","parse","readFileAsUrl","Promise","resolve","fileReader","FileReader","onload","result","readAsDataURL","parseJsonFile","options","Object","keys","filteredOptions","i","length","option","value","Array","push","cloneDeep","associated","removedId","each","key","v","index","filteredSvg","filter","id","parseSvgFile","url","useEffect","setTimeout","strokes","isLoaded","ids","d3","select","selectAll","args","elem","this","attr","isNil","stroke","on","selections","isEmpty","clonedJsonContent","clonedAssociatedCards","unassign","map","assign","style","selected","svgSelections","svgElem","strokeInfo","jsonElem","hasSvg","svgMap","add","Set","has","onCardClick","getCardContent","data","Box","p","className","undefined","variant","forEach","cardContent","type","Card","clsx","CardContent","CardActions","Warning","filteredCards","Typography","getCards","pl","pt","disabled","src","clonedOriginalContent","error","palette","main","FileUploader","onSave","acceptedFiles","title","setOpen","filesLimit","maxFileSize","Infinity","files","showPreviews","message","defaultProps","transition","transitions","create","easing","sharp","duration","leavingScreen","buttonContainer","Main","setJsonFile","openJsonPreview","setOpenJsonPreview","setSvgFile","reset","setIsReseted","isReseted","ToolViewer","svgEl","document","getElementById","children","setAttribute","svgData","outerHTML","svgBlob","Blob","zip","JSZip","stringify","generateAsync","then","FileSaver","saveAs","fullScreen","pr","Root","App","ReactDOM","render","createAction","initialState","createSlice","name","action","payload","extraReducers","tool","$appData","localStorage","getItem","err","setItem","freeze"],"mappings":"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","file":"static/js/main.159df3dd.chunk.js","sourcesContent":["import logger from 'redux-logger';\nimport {\n    configureStore,\n    getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport { reducers } from '../slices';\nimport { storage as storageService } from '../../services';\n\nfunction rehydrateStore() {\n    return storageService.get();\n}\n\nfunction dehydrateStore(store) {\n    storageService.set(store.getState());\n}\n\nconst store = configureStore({\n    preloadedState: rehydrateStore(),\n    reducer: reducers,\n    middleware: process && process.env && process.env.NODE_ENV === 'development'\n        ? [\n            ...getDefaultMiddleware(),\n            logger,\n        ]\n        : [...getDefaultMiddleware()],\n});\n\nstore.subscribe(() => dehydrateStore(store));\n\nexport default store;\n","import { useSelector } from 'react-redux';\nimport _ from 'lodash';\n\nexport default function useStore(selector, equality) {\n    const store = useSelector(\n        _.isFunction(selector)\n            ? selector\n            : state => (!_.isArray(selector) ? state[selector] : _.pick(state, selector)),\n        equality,\n    );\n    return store || {};\n}\n","import { useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { actions as storeActions } from '../redux/slices';\n\nexport default function useActions(storeName) {\n    let actions = storeActions[storeName];\n    const dispatch = useDispatch();\n    actions = _.reduce(actions, (accumulator, functionDefinition, functionName) => {\n        accumulator[functionName] = (...args) => dispatch(functionDefinition(...args));\n        return accumulator;\n    }, {});\n    return actions || {};\n}\n","import React from 'react';\nimport {\n    Box,\n    Card,\n    Button,\n    Dialog,\n    Typography,\n    CardContent,\n    CardActions,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n} from '@material-ui/core';\nimport {\n    Warning as WarningIcon,\n} from '@material-ui/icons';\nimport _ from 'lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SVG from 'react-inlinesvg';\nimport clsx from 'clsx';\nimport * as d3 from 'd3';\nimport {\n    useStore,\n    useActions,\n} from '../../hooks';\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 10,\n    },\n    jsonViewer: {\n        position: 'relative',\n        border: '1px solid black',\n        height: '100%',\n        width: '100%',\n        margin: 10,\n        minWidth: 450,\n    },\n    svgViewer: {\n        position: 'relative',\n        border: '1px solid black',\n        height: '100%',\n        width: '100%',\n        margin: 10,\n        minWidth: 450,\n    },\n    svgButtonTopButtonContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        position: 'absolute',\n        top: 0,\n        right: 0,\n    },\n    picklist: {\n        margin: 10,\n        minWidth: 150,\n    },\n    assignButton: { margin: 10 },\n    cards: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        alignContent: 'flex-start',\n        height: '90%',\n        overflow: 'auto',\n    },\n    card: {\n        minWidth: 180,\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 10,\n        position: 'relative',\n        cursor: 'pointer',\n        border: '1px solid white',\n    },\n    previewCard: {\n        minWidth: 180,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        margin: 10,\n        border: '1px solid white',\n    },\n    selectedCard: { border: '1px solid tomato' },\n    svgContainer: {\n        background: '#ffffff',\n        marginTop: theme.spacing(8),\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        padding: theme.spacing(2),\n    },\n    cardWarning: {\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n    },\n    svg: {\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover',\n        overflow: 'hidden',\n    },\n    jsonView: { padding: 10 },\n    cardContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    button: {\n        textTransform: 'none',\n        margin: 5,\n    },\n}));\n\nfunction Confirmation({\n    content,\n    onConfirm,\n    onClose,\n    open,\n    showCancel,\n}) {\n    return (\n        <Dialog\n            onClose={onClose}\n            open={open}\n        >\n            <DialogContent>\n                <DialogContentText>\n                    {content}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    color='primary'\n                    onClick={onConfirm}\n                >\n                    Ok\n                </Button>\n                {showCancel && (\n                    <Button\n                        autoFocus\n                        color='primary'\n                        onClick={onClose}\n                    >\n                        Cancel\n                    </Button>\n                )}\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nfunction Viewer({ svgFile, jsonFile }) {\n    const classes = useStyles();\n    const {\n        jsonContent,\n        originalJsonContent,\n        svgContent,\n        picklistValue,\n        picklistOptions,\n        selectedCard,\n        selectedSvgElements,\n        strokeMap,\n        associatedCards,\n        allSelected,\n    } = useStore('tool');\n    const {\n        setJsonContent,\n        setSvgContent,\n        setPicklistValue,\n        setPicklistOptions,\n        setSelectedCard,\n        setSelectedSvgElements,\n        setStrokeMap,\n        setAssociatedCards,\n        setAllSelected,\n        setOriginalJsonContent,\n    } = useActions('tool');\n    const [confirmationAction, setConfirmationAction] = React.useState('');\n    const [openConfirmation, setOpenConfirmation] = React.useState(false);\n    const [contentWarning, setContentWarning] = React.useState(false);\n    const [svgLoaded, setSvgLoaded] = React.useState(false);\n    const [idMap, setIdMap] = React.useState({});\n\n    const selectedCardRef = React.useRef(null);\n    selectedCardRef.current = selectedCard;\n\n    const selectedSvgElementsRef = React.useRef(null);\n    selectedSvgElementsRef.current = selectedSvgElements;\n\n    const strokeMapRef = React.useRef(null);\n    strokeMapRef.current = strokeMap;\n\n    const associatedCardsRef = React.useRef(null);\n    associatedCardsRef.current = associatedCards;\n\n    const jsonContentRef = React.useRef(null);\n    jsonContentRef.current = jsonContent;\n\n    const svgContentRef = React.useRef(null);\n    svgContentRef.current = svgContent;\n\n    const idMapRef = React.useRef(null);\n    idMapRef.current = idMap;\n\n    const readFileAsJson = async file => {\n        const text = await file.text();\n        return JSON.parse(text);\n    };\n\n    const readFileAsUrl = file => new Promise(resolve => {\n        const fileReader = new FileReader();\n        fileReader.onload = () => resolve(fileReader.result);\n        fileReader.readAsDataURL(file);\n    });\n\n    const assign = selections => {\n        if (_.isNil(selectedCardRef.current) || _.isEmpty(selections)) return;\n        const jsonContent = jsonContentRef.current;\n        const clonedJsonContent = _.cloneDeep(jsonContent);\n        const value = selectedCardRef.current;\n        const { key, index } = value;\n        clonedJsonContent[key][index].svg = _.map(selections, (_, key) => key);\n        setJsonContent(clonedJsonContent);\n        setSelectedSvgElements(selections);\n        const clonedAssociatedCards = _.cloneDeep(associatedCardsRef.current);\n        clonedAssociatedCards[`${key}-${index}`] = true;\n        setAssociatedCards(clonedAssociatedCards);\n    };\n\n    const unassign = (selections, removedId) => {\n        if (_.isNil(selectedCardRef.current) || _.isEmpty(selections)) return;\n        const jsonContent = jsonContentRef.current;\n        const clonedJsonContent = _.cloneDeep(jsonContent);\n        const value = selectedCardRef.current;\n        const { key, index } = value;\n        const { svg } = clonedJsonContent[key][index];\n        clonedJsonContent[key][index].svg = _.filter(svg, value => value !== removedId);\n        setJsonContent(clonedJsonContent);\n        delete selections[removedId];\n        setSelectedSvgElements(selections);\n        const clonedAssociatedCards = _.cloneDeep(associatedCardsRef.current);\n        if (_.isEmpty(clonedJsonContent[key][index].svg)) {\n            delete clonedAssociatedCards[`${key}-${index}`];\n        }\n        setAssociatedCards(clonedAssociatedCards);\n    };\n\n    const parseJsonFile = async file => {\n        const svgContent = svgContentRef.current;\n        const jsonFile = await readFileAsJson(file);\n        const options = Object.keys(jsonFile);\n        const filteredOptions = [];\n        for (let i = 0; i < options.length; ++i) {\n            const option = options[i];\n            const value = jsonFile[option];\n            if (Array.isArray(value)) {\n                filteredOptions.push(option);\n            }\n        }\n        setPicklistOptions(filteredOptions);\n        setOriginalJsonContent(_.cloneDeep(jsonFile));\n        setPicklistValue(filteredOptions[0]);\n        const associated = {};\n        let removedId = false;\n        if (svgContent) {\n            const idMap = idMapRef.current;\n            _.each(jsonFile, (value, key) => {\n                _.each(value, (v, index) => {\n                    const { svg } = v;\n                    if (Array.isArray(svg)) {\n                        const filteredSvg = svg.filter(id => {\n                            if (!(id in idMap)) {\n                                removedId = true;\n                                return false;\n                            }\n                            return true;\n                        });\n                        if (filteredSvg.length > 0) {\n                            associated[`${key}-${index}`] = true;\n                        }\n                        v.svg = filteredSvg;\n                    }\n                });\n            });\n        }\n        setAssociatedCards(associated);\n        if (removedId) {\n            setContentWarning(true);\n        }\n        setJsonContent(jsonFile);\n    };\n\n    const parseSvgFile = async file => {\n        const url = await readFileAsUrl(file);\n        setSvgContent(url);\n    };\n\n    React.useEffect(() => {\n        if (jsonFile) {\n            parseJsonFile(jsonFile);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [jsonFile]);\n\n    React.useEffect(() => {\n        if (svgFile) {\n            parseSvgFile(svgFile);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [svgFile]);\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            const strokes = {};\n            let isLoaded = false;\n            const ids = {};\n            d3.select('#workspace-svg')\n                .select('g')\n                .selectAll('*')\n                .each(function(...args) {\n                    const [, index] = args;\n                    const elem = d3.select(this);\n                    let id = elem.attr('id');\n                    if (_.isNil(id)) {\n                        id = `e-${index}`;\n                        elem.attr('id', id);\n                    }\n                    id = `#${id}`;\n                    strokes[id] = {\n                        id,\n                        stroke: elem.attr('stroke'),\n                    };\n                    ids[id] = true;\n                })\n                .on('click', function() {\n                    isLoaded = true;\n                    let { id } = this;\n                    id = `#${id}`;\n                    const selections = { ...selectedSvgElementsRef.current };\n                    const strokes = strokeMapRef.current;\n                    const elem = d3.select(this);\n                    if (id in selections) {\n                        elem.attr('stroke', strokes[id].stroke);\n                        unassign(selections, id);\n                    } else {\n                        selections[id] = true;\n                        elem.attr('stroke', 'tomato');\n                        assign(selections);\n                    }\n                })\n                .attr('pointer-events', 'fill')\n                .style('cursor', 'pointer');\n            if (isLoaded && !svgLoaded) {\n                setSvgLoaded(true);\n            }\n            setStrokeMap(strokes);\n            const jsonContent = _.cloneDeep(jsonContentRef.current);\n            if (jsonContent) {\n                const associated = {};\n                let removedId = false;\n                _.each(jsonContent, (value, key) => {\n                    _.each(value, (v, index) => {\n                        const { svg } = v;\n                        if (Array.isArray(svg)) {\n                            const filteredSvg = svg.filter(id => {\n                                if (!(id in ids)) {\n                                    removedId = true;\n                                    return false;\n                                }\n                                return true;\n                            });\n                            if (filteredSvg.length > 0) {\n                                associated[`${key}-${index}`] = true;\n                            }\n                            v.svg = filteredSvg;\n                        }\n                    });\n                });\n                setAssociatedCards(associated);\n                if (removedId) {\n                    setContentWarning(true);\n                }\n                setJsonContent(jsonContent);\n            }\n            setIdMap(ids);\n        }, 0);\n    }, [svgContent]);\n\n    React.useEffect(() => {\n        if (svgLoaded) {\n            d3.select('#workspace-svg')\n                .select('g')\n                .selectAll('*')\n                .each(function() {\n                    let { id } = this;\n                    id = `#${id}`;\n                    const elem = d3.select(this);\n                    if (id in selectedSvgElementsRef.current) {\n                        elem.attr('stroke', 'tomato');\n                    }\n                });\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [svgContent, jsonContent]);\n\n    React.useEffect(() => {\n        const selected = selectedCardRef.current;\n        const svgSelections = {};\n        if (!_.isNil(selected)) {\n            const { key, index } = selected;\n            const jsonContent = jsonContentRef.current;\n            const jsonElem = jsonContent[key][index];\n            if (!_.isNil(jsonElem)) {\n                let hasSvg = true;\n                let { svg } = jsonElem;\n                if (!Array.isArray(svg)) {\n                    svg = [];\n                    hasSvg = false;\n                }\n                if (Array.isArray(svg)) {\n                    const svgMap = svg.reduce((accumulator, value) => {\n                        accumulator.add(value);\n                        return accumulator;\n                    }, new Set());\n                    d3.select('#workspace-svg')\n                        .select('g')\n                        .selectAll('*')\n                        .each(function() {\n                            let { id } = this;\n                            id = `#${id}`;\n                            const svgElem = d3.select(this);\n                            if (svgMap.has(id)) {\n                                svgSelections[id] = true;\n                                svgElem.attr('stroke', 'tomato');\n                            } else {\n                                if (id in svgSelections) {\n                                    delete svgSelections[id];\n                                }\n                                const strokeInfo = strokeMapRef.current[id];\n                                svgElem.attr('stroke', strokeInfo.stroke);\n                            }\n                        });\n                }\n                if (!hasSvg) {\n                    const clonedJsonContent = _.cloneDeep(jsonContent);\n                    const jsonElem = clonedJsonContent[key][index];\n                    jsonElem.svg = svg;\n                    setJsonContent(clonedJsonContent);\n                }\n            }\n        } else {\n            d3.select('#workspace-svg')\n                .select('g')\n                .selectAll('*')\n                .each(function() {\n                    let { id } = this;\n                    id = `#${id}`;\n                    const svgElem = d3.select(this);\n                    const strokeInfo = strokeMapRef.current[id];\n                    svgElem.attr('stroke', strokeInfo.stroke);\n                });\n        }\n        setSelectedSvgElements(svgSelections);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedCard]);\n\n    const onCardClick = (index, key) => {\n        const selection = { ...selectedCardRef.current };\n        if (selection.index === index) {\n            setSelectedCard(null);\n        } else {\n            setSelectedCard({\n                key,\n                index,\n            });\n        }\n    };\n\n    const onRefresh = () => {\n        setOpenConfirmation(true);\n        setConfirmationAction('reset');\n    };\n\n    const onRefreshConfirm = () => {\n        setOpenConfirmation(false);\n        setSelectedCard(null);\n        const associated = {};\n        let removedId = false;\n        const clonedOriginalContent = _.cloneDeep(originalJsonContent);\n        if (svgContent) {\n            const idMap = idMapRef.current;\n            _.each(clonedOriginalContent, (value, key) => {\n                _.each(value, (v, index) => {\n                    const { svg } = v;\n                    if (Array.isArray(svg)) {\n                        const filteredSvg = svg.filter(id => {\n                            if (!(id in idMap)) {\n                                removedId = true;\n                                return false;\n                            }\n                            return true;\n                        });\n                        if (filteredSvg.length > 0) {\n                            associated[`${key}-${index}`] = true;\n                        }\n                        v.svg = filteredSvg;\n                    }\n                });\n            });\n        }\n        setAssociatedCards(associated);\n        if (removedId) {\n            setContentWarning(true);\n        }\n        setJsonContent(clonedOriginalContent);\n    };\n\n    const onClearAll = () => {\n        setOpenConfirmation(true);\n        setConfirmationAction('clearAll');\n    };\n\n    const onClearAllConfirm = () => {\n        setOpenConfirmation(false);\n        const jsonContent = jsonContentRef.current;\n        const clonedJsonContent = _.cloneDeep(jsonContent);\n        _.each(clonedJsonContent, value => {\n            if (Array.isArray(value)) {\n                _.each(value, v => {\n                    v.svg = [];\n                });\n            }\n        });\n        setJsonContent(clonedJsonContent);\n        setSelectedCard(null);\n        setAssociatedCards({});\n    };\n\n    const getCardContent = (picklistValue, data) => _.reduce(data, (accumulator, value, key) => {\n        if (Array.isArray(value)) return accumulator;\n        if (picklistValue === 'ports' && key === 'type') {\n            return accumulator;\n        }\n        accumulator.push(\n            <Box\n                key={key}\n                p={0.5}\n            >\n                <b>{key}</b>\n                {`: ${value}`}\n            </Box>,\n        );\n        return accumulator;\n    }, []);\n\n    const getCards = () => {\n        const jsonContent = jsonContentRef.current;\n        if (allSelected) {\n            return _.reduce(jsonContent, (accumulator, value, key) => {\n                if (Array.isArray(value)) {\n                    value.forEach((cardContent, index) => {\n                        if (key === 'ports' && cardContent.type !== 'output') return accumulator;\n                        accumulator.push(\n                            <Box\n                                key={`${key}-${index}`}\n                                className={classes.cardContainer}\n                            >\n                                <Card\n                                    className={clsx(classes.card, { [classes.selectedCard]: selectedCard && selectedCard.index === index && selectedCard.key === key })}\n                                    onClick={() => onCardClick(index, key)}\n                                >\n                                    <CardContent>{getCardContent(key, cardContent)}</CardContent>\n                                    {!(`${key}-${index}` in associatedCards) && <CardActions className={classes.cardWarning}><WarningIcon /></CardActions>}\n                                </Card>\n                            </Box>,\n                        );\n                    });\n                }\n                return accumulator;\n            }, []);\n        }\n        const cards = jsonContent[picklistValue];\n        if (Array.isArray(cards)) {\n            const filteredCards = cards.filter(card => {\n                if (picklistValue === 'ports' && card.type === 'input') return false;\n                return true;\n            });\n            if (_.isEmpty(filteredCards)) {\n                return (\n                    <Box p={4}>\n                        <Typography>There are no ports for this model.</Typography>\n                    </Box>\n                );\n            }\n            return filteredCards.reduce((accumulator, value, index) => {\n                accumulator.push(\n                    <Box\n                        key={index}\n                        className={classes.cardContainer}\n                    >\n                        <Card\n                            className={clsx(classes.card, { [classes.selectedCard]: selectedCard && selectedCard.index === index })}\n                            onClick={() => onCardClick(index, picklistValue)}\n                        >\n                            <CardContent>{getCardContent(picklistValue, value)}</CardContent>\n                            {!(`${picklistValue}-${index}` in associatedCards) && <CardActions className={classes.cardWarning}><WarningIcon /></CardActions>}\n                        </Card>\n                    </Box>,\n                );\n                return accumulator;\n            }, []);\n        }\n\n        return null;\n    };\n\n    return (\n        <>\n            <Box className={classes.root}>\n                <Box className={classes.jsonViewer}>\n                    {jsonContent && <Box>\n                        <Box p={1}>\n                            <Button\n                                className={classes.button}\n                                color={allSelected ? 'primary' : undefined}\n                                onClick={() => {\n                                    setAllSelected(true);\n                                    setSelectedCard(null);\n                                }}\n                                variant='contained'\n                            >\n                                All\n                            </Button>\n                            {picklistOptions.map((option, index) => (\n                                <Button\n                                    key={index}\n                                    className={classes.button}\n                                    color={option === picklistValue && !allSelected ? 'primary' : undefined}\n                                    onClick={() => {\n                                        setPicklistValue(option);\n                                        setSelectedCard(null);\n                                        setAllSelected(false);\n                                    }}\n                                    variant='contained'\n                                >\n                                    {option === 'ports' ? 'output ports' : option}\n                                </Button>\n                            ))}\n                        </Box>\n                    </Box>}\n                    {picklistValue && (\n                        <Box className={classes.cards}>\n                            {getCards()}\n                        </Box>\n                    )}\n                    {jsonContent && <Box\n                        pl={2}\n                        pt={1}\n                    >\n                        <Typography>Note: Input ports will be automatically associated.</Typography>\n                    </Box>}\n                </Box>\n                <Box className={classes.svgViewer}>\n                    <Box className={classes.svgButtonTopButtonContainer}>\n                        <Box p={1}>\n                            <Button\n                                className={classes.button}\n                                color='primary'\n                                disabled={!jsonContent && !svgContent}\n                                onClick={onRefresh}\n                                variant='contained'\n                            >\n                                Reset\n                            </Button>\n                            <Button\n                                className={classes.button}\n                                color='primary'\n                                disabled={!jsonContent && !svgContent}\n                                onClick={onClearAll}\n                                variant='contained'\n                            >\n                                Clear All\n                            </Button>\n                        </Box>\n                    </Box>\n                    {svgContent && (\n                        <Box\n                            className={classes.svgContainer}\n                            id='workspace-svg-container'\n                        >\n                            <SVG\n                                className={classes.svg}\n                                id='workspace-svg'\n                                src={svgContent}\n                            />\n                        </Box>\n                    )}\n                </Box>\n            </Box>\n            <Confirmation\n                content={confirmationAction === 'reset'\n                    ? 'All the modifications will be lost. Do you want to continue?'\n                    : 'All associations between the model structure elements and the diagram will be removed. Do you want to continue?'\n                }\n                onClose={() => setOpenConfirmation(false)}\n                onConfirm={confirmationAction === 'reset' ? onRefreshConfirm : onClearAllConfirm}\n                open={openConfirmation}\n                showCancel\n            />\n            <Confirmation\n                content='Errors were detected in associations between model structure elements and the diagram provided. They will be ignored.'\n                onClose={() => setContentWarning(false)}\n                onConfirm={() => setContentWarning(false)}\n                open={contentWarning}\n                showCancel={false}\n            />\n        </>\n    );\n}\n\nexport default Viewer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Box, makeStyles, Typography } from '@material-ui/core';\nimport { DropzoneDialog } from 'material-ui-dropzone';\n\nexport const useStyles = makeStyles(theme => ({ error: { color: theme.palette.error.main } }));\n\nconst FileUploader = ({\n    className,\n    style,\n    onSave,\n    error,\n    acceptedFiles,\n    title,\n}) => {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSave = files => {\n        setOpen(false);\n        onSave(files);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    return (\n        <Box\n            alignItems='center'\n            className={className}\n            display='flex'\n            flexDirection='row'\n            style={style}\n        >\n            <Button\n                color='primary'\n                variant='contained'\n                onClick={handleOpen}\n            >\n                {title}\n            </Button>\n            <DropzoneDialog\n                acceptedFiles={acceptedFiles}\n                filesLimit={1}\n                maxFileSize={Infinity}\n                onClose={handleClose}\n                onSave={handleSave}\n                open={open}\n                showPreviews\n            />\n            {error && <Typography className={classes.error}>{error.message}</Typography>}\n        </Box>\n    );\n};\n\nFileUploader.propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n    onSave: PropTypes.func.isRequired,\n    error: PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.bool,\n    ]),\n    acceptedFiles: PropTypes.array,\n    title: PropTypes.string,\n};\n\nFileUploader.defaultProps = {\n    className: '',\n    style: {},\n    error: undefined,\n    acceptedFiles: [],\n    title: undefined,\n};\n\nexport default FileUploader;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Button, Dialog } from '@material-ui/core';\nimport JSZip from 'jszip';\nimport FileSaver from 'file-saver';\nimport ToolViewer from '../ToolViewer';\nimport FileUploader from '../FileUploader';\nimport Highlight from 'react-highlight';\nimport { useStore, useActions } from '../../hooks';\nimport clsx from 'clsx';\n\nexport const useStyles = makeStyles(theme => ({\n    content: {\n        height: '100vh',\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    buttonContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        margin: 30,\n    },\n    button: { marginRight: 5 },\n}));\n\nfunction Main() {\n    const classes = useStyles();\n    const [jsonFile, setJsonFile] = React.useState(null);\n    const [openJsonPreview, setOpenJsonPreview] = React.useState(false);\n    const [svgFile, setSvgFile] = React.useState(null);\n    const { reset, setIsReseted } = useActions('tool');\n    const { svgContent, jsonContent, isReseted } = useStore('tool');\n\n    React.useEffect(() => {\n        reset();\n    }, []);\n\n    React.useEffect(() => {\n        setJsonFile(null);\n        setSvgFile(null);\n    }, [isReseted]);\n\n    const onDownload = () => {\n        const elem = document.getElementById('workspace-svg-container');\n        const svgEl = elem.children[0];\n        svgEl.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        const svgData = svgEl.outerHTML;\n        const preface = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n';\n        const svgBlob = new Blob([preface, svgData], { type: 'image/svg+xml;charset=utf-8' });\n\n        const zip = JSZip();\n        zip.file('result.svg', svgBlob);\n        zip.file('result.json', JSON.stringify(jsonContent, null, 2));\n        zip.generateAsync({ type: 'blob' })\n            .then(content => {\n                FileSaver.saveAs(content, 'result.zip');\n            });\n    };\n\n    const onJsonUpload = files => {\n        setJsonFile(files[0]);\n        setIsReseted(false);\n    };\n\n    const onSvgUpload = files => {\n        setSvgFile(files[0]);\n        setIsReseted(false);\n    };\n\n    return (\n        <>\n            <title>DEVS Webviewer Linker</title>\n            <main className={classes.content}>\n                {(!isReseted) && (\n                    <ToolViewer\n                        jsonFile={jsonFile}\n                        svgFile={svgFile}\n                    />\n                )}\n                <Box className={classes.buttonContainer}>\n                    {!jsonContent && (\n                        <FileUploader\n                            acceptedFiles={['application/json']}\n                            className={classes.button}\n                            onSave={onJsonUpload}\n                            title='Load JSON'\n                        />\n                    )}\n                    {!svgContent && (\n                        <FileUploader\n                            acceptedFiles={['image/svg+xml']}\n                            className={classes.button}\n                            onSave={onSvgUpload}\n                            title='Load SVG'\n                        />\n                    )}\n                    {jsonContent && <Button\n                        className={classes.button}\n                        color='primary'\n                        variant='contained'\n                        onClick={() => setOpenJsonPreview(true)}\n                    >\n                        Show JSON\n                    </Button>}\n                    {jsonContent && svgContent && (\n                        <Button\n                            className={classes.button}\n                            color='primary'\n                            onClick={onDownload}\n                            variant='contained'\n                        >\n                            Download\n                        </Button>\n                    )}\n                </Box>\n                <Dialog\n                    fullScreen\n                    onClose={() => setOpenJsonPreview(false)}\n                    open={openJsonPreview}\n                >\n                    <Box\n                        pl={1}\n                        pr={1}\n                    >\n                        <Highlight className={clsx('json', classes.jsonView)}>\n                            {JSON.stringify(jsonContent, null, 2)}\n                        </Highlight>\n                    </Box>\n                </Dialog>\n            </main>\n        </>\n    );\n}\n\nexport default Main;\n","import React from 'react';\nimport Main from '../Main';\n\nfunction Root() {\n    return (\n        <Main />\n    );\n}\n\nexport default Root;\n","import Root from './Root';\n\nexport default Root;\n","import store from './store';\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport Root from './components/Root';\nimport store from './redux/store';\n\nfunction App() {\n    return (\n        <ReduxProvider store={store}>\n            <Root />\n        </ReduxProvider>\n    );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import { createAction } from '@reduxjs/toolkit';\n\nconst reset = createAction('reset');\n\nexport { reset };\n","import { createSlice } from '@reduxjs/toolkit';\nimport { reset } from '../actions';\n\nconst initialState = {\n    jsonFile: null,\n    svgFile: null,\n    jsonContent: '',\n    originalJsonContent: '',\n    svgContent: '',\n    picklistValue: '',\n    picklistOptions: [],\n    selectedCard: null,\n    selectedSvgElements: {},\n    strokeMap: {},\n    associatedCards: {},\n    allSelected: true,\n    isReseted: true,\n};\n\nexport default createSlice({\n    name: 'tool',\n    initialState,\n    reducers: {\n        setJsonContent: (state, action) => {\n            state.jsonContent = action.payload;\n        },\n        setOriginalJsonContent: (state, action) => {\n            state.originalJsonContent = action.payload;\n        },\n        setSvgContent: (state, action) => {\n            state.svgContent = action.payload;\n        },\n        setPicklistValue: (state, action) => {\n            state.picklistValue = action.payload;\n        },\n        setPicklistOptions: (state, action) => {\n            state.picklistOptions = action.payload;\n        },\n        setSelectedCard: (state, action) => {\n            state.selectedCard = action.payload;\n        },\n        setSelectedSvgElements: (state, action) => {\n            state.selectedSvgElements = action.payload;\n        },\n        setStrokeMap: (state, action) => {\n            state.strokeMap = action.payload;\n        },\n        setAssociatedCards: (state, action) => {\n            state.associatedCards = action.payload;\n        },\n        setIsReseted: (state, action) => {\n            state.isReseted = action.payload;\n        },\n        setAllSelected: (state, action) => {\n            state.allSelected = action.payload;\n        },\n    },\n    extraReducers: {\n        [reset]: state => {\n            Object.assign(state, initialState);\n        },\n    },\n});\n","import _ from 'lodash';\nimport tool from './tool';\nimport { reset } from '../actions';\n\nexport const actions = {\n    tool: _.assign(tool.actions, { reset }),\n};\n\nexport const reducers = {\n    tool: tool.reducer,\n};\n","import _ from 'lodash';\n\nclass StorageService {\n    get = () => {\n        try {\n            const $appData = localStorage.getItem('$appData');\n            if (typeof $appData === 'string' && $appData) {\n                return JSON.parse($appData);\n            }\n            return undefined;\n        } catch (err) {\n            return undefined;\n        }\n    }\n\n    getItem = key => _.get(this.get(), key, null)\n\n    set = data => {\n        try { localStorage.setItem('$appData', JSON.stringify(data)); } catch (err) {}\n    }\n}\n\nconst storageService = new StorageService();\n\nObject.freeze(storageService);\n\nexport default storageService;\n\nexport { StorageService };\n"],"sourceRoot":""}